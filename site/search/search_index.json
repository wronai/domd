{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DoMD - Wykrywacz komend projektowych \u00b6 ![DoMD Logo](assets/logo.png) **Automatyczne wykrywanie i wykonywanie komend w projektach programistycznych** [![Wersja PyPI](https://img.shields.io/pypi/v/domd.svg)](https://pypi.org/project/domd/) [![Wspierane wersje Pythona](https://img.shields.io/pypi/pyversions/domd.svg)](https://pypi.org/project/domd/) [![Licencja](https://img.shields.io/badge/Licencja-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0) [![Testy](https://github.com/wronai/domd/workflows/Tests/badge.svg)](https://github.com/wronai/domd/actions) [![Pokrycie kodu](https://codecov.io/gh/wronai/domd/branch/main/graph/badge.svg)](https://codecov.io/gh/wronai/domd) [![Dokumentacja](https://img.shields.io/badge/dokumentacja-aktualna-brightgreen.svg)](https://domd.readthedocs.io/) \ud83c\udf1f Czym jest DoMD? \u00b6 DoMD to narz\u0119dzie do automatycznego wykrywania i wykonywania komend w projektach programistycznych. Automatycznie analizuje pliki konfiguracyjne projektu i generuje raporty z wykonania komend. G\u0142\u00f3wne funkcje \u00b6 Automatyczne wykrywanie komend z popularnych plik\u00f3w konfiguracyjnych Wykonywanie komend z obs\u0142ug\u0105 b\u0142\u0119d\u00f3w i limit\u00f3w czasowych Generowanie raport\u00f3w w formacie Markdown, JSON lub zwyk\u0142ym tek\u015bcie Integracja z Dockerem do izolowanego wykonywania komend Obs\u0142uga wielu j\u0119zyk\u00f3w i narz\u0119dzi programistycznych Konfigurowalne z u\u017cyciem plik\u00f3w .domdignore i .dodocker \ud83d\ude80 Szybki start \u00b6 # Instalacja pip install domd # Uruchomienie w katalogu projektu domd \ud83d\udcd6 Spis tre\u015bci \u00b6 Instalacja - Jak zainstalowa\u0107 i skonfigurowa\u0107 DoMD U\u017cycie - Szczeg\u00f3\u0142owy przewodnik po funkcjach Funkcje - Opis dost\u0119pnych funkcji i mo\u017cliwo\u015bci API - Dokumentacja interfejsu programistycznego Rozw\u00f3j - Informacje dla programist\u00f3w \ud83c\udf0d Wspierane j\u0119zyki i narz\u0119dzia \u00b6 Python : pyproject.toml , setup.py , requirements.txt JavaScript/Node.js : package.json Make : Makefile Docker : Dockerfile , docker-compose.yml Ansible : Playbooki, role i inventory Oraz wiele innych... \ud83d\udcca Przyk\u0142adowy raport \u00b6 # Raport DoMD - 2023-11-15 14:30:00 ## \u2705 Zako\u0144czone pomy\u015blnie - `pytest` - Testy jednostkowe (1.2s) - `black .` - Formatowanie kodu (0.8s) ## \u274c B\u0142\u0119dy - `mypy .` - B\u0142\u0105d typowania (2.1s) ``` error: Function is missing a return type annotation ``` ## \u26a0 Ostrze\u017cenia - `bandit -r .` - Znaleziono potencjalne problemy bezpiecze\u0144stwa (3.4s) - Uwaga: U\u017cycie niebezpiecznej funkcji `eval` w pliku `utils.py:42` \ud83e\udd1d Wsparcie \u00b6 Masz pytania lub problemy? Zg\u0142o\u015b issue lub skorzystaj z naszej dokumentacji. \ud83d\udcdc Licencja \u00b6 Apache 2.0 \u00a9 2023 WronAI","title":"Home"},{"location":"#domd-wykrywacz-komend-projektowych","text":"![DoMD Logo](assets/logo.png) **Automatyczne wykrywanie i wykonywanie komend w projektach programistycznych** [![Wersja PyPI](https://img.shields.io/pypi/v/domd.svg)](https://pypi.org/project/domd/) [![Wspierane wersje Pythona](https://img.shields.io/pypi/pyversions/domd.svg)](https://pypi.org/project/domd/) [![Licencja](https://img.shields.io/badge/Licencja-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0) [![Testy](https://github.com/wronai/domd/workflows/Tests/badge.svg)](https://github.com/wronai/domd/actions) [![Pokrycie kodu](https://codecov.io/gh/wronai/domd/branch/main/graph/badge.svg)](https://codecov.io/gh/wronai/domd) [![Dokumentacja](https://img.shields.io/badge/dokumentacja-aktualna-brightgreen.svg)](https://domd.readthedocs.io/)","title":"DoMD - Wykrywacz komend projektowych"},{"location":"#czym-jest-domd","text":"DoMD to narz\u0119dzie do automatycznego wykrywania i wykonywania komend w projektach programistycznych. Automatycznie analizuje pliki konfiguracyjne projektu i generuje raporty z wykonania komend.","title":"\ud83c\udf1f Czym jest DoMD?"},{"location":"#gowne-funkcje","text":"Automatyczne wykrywanie komend z popularnych plik\u00f3w konfiguracyjnych Wykonywanie komend z obs\u0142ug\u0105 b\u0142\u0119d\u00f3w i limit\u00f3w czasowych Generowanie raport\u00f3w w formacie Markdown, JSON lub zwyk\u0142ym tek\u015bcie Integracja z Dockerem do izolowanego wykonywania komend Obs\u0142uga wielu j\u0119zyk\u00f3w i narz\u0119dzi programistycznych Konfigurowalne z u\u017cyciem plik\u00f3w .domdignore i .dodocker","title":"G\u0142\u00f3wne funkcje"},{"location":"#szybki-start","text":"# Instalacja pip install domd # Uruchomienie w katalogu projektu domd","title":"\ud83d\ude80 Szybki start"},{"location":"#spis-tresci","text":"Instalacja - Jak zainstalowa\u0107 i skonfigurowa\u0107 DoMD U\u017cycie - Szczeg\u00f3\u0142owy przewodnik po funkcjach Funkcje - Opis dost\u0119pnych funkcji i mo\u017cliwo\u015bci API - Dokumentacja interfejsu programistycznego Rozw\u00f3j - Informacje dla programist\u00f3w","title":"\ud83d\udcd6 Spis tre\u015bci"},{"location":"#wspierane-jezyki-i-narzedzia","text":"Python : pyproject.toml , setup.py , requirements.txt JavaScript/Node.js : package.json Make : Makefile Docker : Dockerfile , docker-compose.yml Ansible : Playbooki, role i inventory Oraz wiele innych...","title":"\ud83c\udf0d Wspierane j\u0119zyki i narz\u0119dzia"},{"location":"#przykadowy-raport","text":"# Raport DoMD - 2023-11-15 14:30:00 ## \u2705 Zako\u0144czone pomy\u015blnie - `pytest` - Testy jednostkowe (1.2s) - `black .` - Formatowanie kodu (0.8s) ## \u274c B\u0142\u0119dy - `mypy .` - B\u0142\u0105d typowania (2.1s) ``` error: Function is missing a return type annotation ``` ## \u26a0 Ostrze\u017cenia - `bandit -r .` - Znaleziono potencjalne problemy bezpiecze\u0144stwa (3.4s) - Uwaga: U\u017cycie niebezpiecznej funkcji `eval` w pliku `utils.py:42`","title":"\ud83d\udcca Przyk\u0142adowy raport"},{"location":"#wsparcie","text":"Masz pytania lub problemy? Zg\u0142o\u015b issue lub skorzystaj z naszej dokumentacji.","title":"\ud83e\udd1d Wsparcie"},{"location":"#licencja","text":"Apache 2.0 \u00a9 2023 WronAI","title":"\ud83d\udcdc Licencja"},{"location":"api/","text":"","title":"Api"},{"location":"docker/","text":"Docker Integration \u00b6 DoMD provides seamless Docker integration, allowing you to run commands in isolated containers with automatic environment detection. This document covers all aspects of using Docker with DoMD. Table of Contents \u00b6 Basic Configuration Advanced Configuration Volume Mounting Environment Variables Debugging Best Practices Troubleshooting Basic Configuration \u00b6 The .dodocker File \u00b6 Create a .dodocker file in your project root to configure Docker execution: # .dodocker test : image : python:3.9-slim # Base image to use description : Run Python tests # Optional description workdir : /app # Working directory in container volumes : # Volume mappings ~/.cache/pip:/.cache/pip # Cache directory .:/app # Mount current directory environment : # Environment variables PYTHONPATH : /app Running Commands \u00b6 Run commands with Docker (automatically detected from .dodocker): # Run tests in Docker poetry run domd run test # Force local execution (bypass Docker) poetry run domd run --no-docker test # List available Docker commands poetry run domd list --docker Advanced Configuration \u00b6 Multiple Command Configurations \u00b6 You can configure multiple commands with different settings: # .dodocker format : image : python:3.9-slim description : Format Python code volumes : .:/app command : \"black .\" # Override default command test : image : node:16-slim description : Run JavaScript tests volumes : .:/app /app/node_modules # Anonymous volume for dependencies environment : NODE_ENV : test Using Docker Compose \u00b6 For more complex setups, you can use Docker Compose: # docker-compose.yml version : '3.8' services : app : build : . volumes : - .:/app environment : - PYTHONPATH=/app working_dir : /app Then reference it in your .dodocker file: test : compose : docker-compose.yml service : app command : pytest tests/ Volume Mounting \u00b6 DoMD handles volume mounting with smart defaults: Current directory is mounted to /app by default Common cache directories are automatically mounted Environment-specific paths are preserved Custom Volume Mounts \u00b6 test : image : python:3.9-slim volumes : .:/app # Mount current directory ~/.cache/pip:/.cache/pip # Cache directory /tmp:/tmp # Mount system temp /data # Anonymous volume Environment Variables \u00b6 Passing Environment Variables \u00b6 You can pass environment variables to Docker containers: # Pass environment variables from host DOMD_ENV = production poetry run domd run test # Or define them in .dodocker test: environment: NODE_ENV: test DEBUG: 1 DATABASE_URL: postgres://user:pass@db:5432/mydb Environment File \u00b6 For sensitive data, use an environment file: test : env_file : .env.test environment : - NODE_ENV=test Debugging \u00b6 Debug Mode \u00b6 To debug Docker-related issues: # Show Docker commands being executed DOMD_DEBUG = 1 poetry run domd run test # Get shell in container with the same environment poetry run domd shell test Logs and Inspection \u00b6 # View container logs docker logs <container_id> # Inspect container configuration docker inspect <container_id> # View running processes docker top <container_id> Best Practices \u00b6 Use Specific Image Tags Prefer specific version tags over latest Example: python:3.9-slim instead of just python Minimize Image Size Use -slim or -alpine variants when possible Clean up package caches in the same RUN instruction Cache Dependencies Mount package caches as volumes Use multi-stage builds for production images Security Never run as root in containers Use .dockerignore to exclude sensitive files Keep images updated with security patches Troubleshooting \u00b6 Common Issues \u00b6 Permission Denied Errors \u00b6 If you see permission errors with mounted volumes: Make sure the container user has proper permissions Set the correct user/group in your Dockerfile: ARG USER_ID = 1000 ARG GROUP_ID = 1000 RUN groupadd -g $GROUP_ID appuser && \\ useradd -u $USER_ID -g appuser -m appuser USER appuser Missing Dependencies \u00b6 If a command works locally but fails in Docker: Check if all required system packages are installed in the image Verify the working directory is set correctly Ensure environment variables are properly passed Network Issues \u00b6 For network-related problems: # Check network connectivity inside container docker run --rm --network host busybox ping google.com # Inspect container network docker network inspect bridge Getting Help \u00b6 If you encounter issues: Run with DOMD_DEBUG=1 for verbose output Check the GitHub Issues Join our Discord Community for support","title":"Docker Integration"},{"location":"docker/#docker-integration","text":"DoMD provides seamless Docker integration, allowing you to run commands in isolated containers with automatic environment detection. This document covers all aspects of using Docker with DoMD.","title":"Docker Integration"},{"location":"docker/#table-of-contents","text":"Basic Configuration Advanced Configuration Volume Mounting Environment Variables Debugging Best Practices Troubleshooting","title":"Table of Contents"},{"location":"docker/#basic-configuration","text":"","title":"Basic Configuration"},{"location":"docker/#the-dodocker-file","text":"Create a .dodocker file in your project root to configure Docker execution: # .dodocker test : image : python:3.9-slim # Base image to use description : Run Python tests # Optional description workdir : /app # Working directory in container volumes : # Volume mappings ~/.cache/pip:/.cache/pip # Cache directory .:/app # Mount current directory environment : # Environment variables PYTHONPATH : /app","title":"The .dodocker File"},{"location":"docker/#running-commands","text":"Run commands with Docker (automatically detected from .dodocker): # Run tests in Docker poetry run domd run test # Force local execution (bypass Docker) poetry run domd run --no-docker test # List available Docker commands poetry run domd list --docker","title":"Running Commands"},{"location":"docker/#advanced-configuration","text":"","title":"Advanced Configuration"},{"location":"docker/#multiple-command-configurations","text":"You can configure multiple commands with different settings: # .dodocker format : image : python:3.9-slim description : Format Python code volumes : .:/app command : \"black .\" # Override default command test : image : node:16-slim description : Run JavaScript tests volumes : .:/app /app/node_modules # Anonymous volume for dependencies environment : NODE_ENV : test","title":"Multiple Command Configurations"},{"location":"docker/#using-docker-compose","text":"For more complex setups, you can use Docker Compose: # docker-compose.yml version : '3.8' services : app : build : . volumes : - .:/app environment : - PYTHONPATH=/app working_dir : /app Then reference it in your .dodocker file: test : compose : docker-compose.yml service : app command : pytest tests/","title":"Using Docker Compose"},{"location":"docker/#volume-mounting","text":"DoMD handles volume mounting with smart defaults: Current directory is mounted to /app by default Common cache directories are automatically mounted Environment-specific paths are preserved","title":"Volume Mounting"},{"location":"docker/#custom-volume-mounts","text":"test : image : python:3.9-slim volumes : .:/app # Mount current directory ~/.cache/pip:/.cache/pip # Cache directory /tmp:/tmp # Mount system temp /data # Anonymous volume","title":"Custom Volume Mounts"},{"location":"docker/#environment-variables","text":"","title":"Environment Variables"},{"location":"docker/#passing-environment-variables","text":"You can pass environment variables to Docker containers: # Pass environment variables from host DOMD_ENV = production poetry run domd run test # Or define them in .dodocker test: environment: NODE_ENV: test DEBUG: 1 DATABASE_URL: postgres://user:pass@db:5432/mydb","title":"Passing Environment Variables"},{"location":"docker/#environment-file","text":"For sensitive data, use an environment file: test : env_file : .env.test environment : - NODE_ENV=test","title":"Environment File"},{"location":"docker/#debugging","text":"","title":"Debugging"},{"location":"docker/#debug-mode","text":"To debug Docker-related issues: # Show Docker commands being executed DOMD_DEBUG = 1 poetry run domd run test # Get shell in container with the same environment poetry run domd shell test","title":"Debug Mode"},{"location":"docker/#logs-and-inspection","text":"# View container logs docker logs <container_id> # Inspect container configuration docker inspect <container_id> # View running processes docker top <container_id>","title":"Logs and Inspection"},{"location":"docker/#best-practices","text":"Use Specific Image Tags Prefer specific version tags over latest Example: python:3.9-slim instead of just python Minimize Image Size Use -slim or -alpine variants when possible Clean up package caches in the same RUN instruction Cache Dependencies Mount package caches as volumes Use multi-stage builds for production images Security Never run as root in containers Use .dockerignore to exclude sensitive files Keep images updated with security patches","title":"Best Practices"},{"location":"docker/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"docker/#common-issues","text":"","title":"Common Issues"},{"location":"docker/#permission-denied-errors","text":"If you see permission errors with mounted volumes: Make sure the container user has proper permissions Set the correct user/group in your Dockerfile: ARG USER_ID = 1000 ARG GROUP_ID = 1000 RUN groupadd -g $GROUP_ID appuser && \\ useradd -u $USER_ID -g appuser -m appuser USER appuser","title":"Permission Denied Errors"},{"location":"docker/#missing-dependencies","text":"If a command works locally but fails in Docker: Check if all required system packages are installed in the image Verify the working directory is set correctly Ensure environment variables are properly passed","title":"Missing Dependencies"},{"location":"docker/#network-issues","text":"For network-related problems: # Check network connectivity inside container docker run --rm --network host busybox ping google.com # Inspect container network docker network inspect bridge","title":"Network Issues"},{"location":"docker/#getting-help","text":"If you encounter issues: Run with DOMD_DEBUG=1 for verbose output Check the GitHub Issues Join our Discord Community for support","title":"Getting Help"},{"location":"domdignore/","text":"\ud83d\udccb .doignore - Instrukcja u\u017cycia \u00b6 \u2705 Problem rozwi\u0105zany! \u00b6 Doda\u0142em kompletny system .doignore do TodoMD! Teraz mo\u017cesz \u0142atwo pomija\u0107 problematyczne komendy bez ich r\u0119cznego usuwania. \ud83d\ude80 Nowe funkcje: \u00b6 1. Automatyczne filtrowanie komend \u00b6 # TodoMD automatycznie pominie komendy z .doignore domd 2. Generowanie template .doignore \u00b6 # Stw\u00f3rz plik .doignore z przyk\u0142adami domd --generate-ignore 3. Podgl\u0105d ignorowanych komend \u00b6 # Zobacz kt\u00f3re komendy b\u0119d\u0105 pomini\u0119te domd --show-ignored 4. W\u0142asny plik ignore \u00b6 # U\u017cyj niestandardowego pliku domd --ignore-file my-ignores.txt \ud83d\udcdd Sk\u0142adnia .doignore: \u00b6 # .doignore - TodoMD Ignore File # === DOK\u0141ADNE DOPASOWANIE === poetry run domd # Pominie dok\u0142adnie t\u0119 komend\u0119 npm run dev # Pominie dok\u0142adnie \"npm run dev\" # === WZORCE (PATTERNS) === *serve* # Pominie wszystkie komendy zawieraj\u0105ce \"serve\" poetry run * # Pominie wszystkie komendy zaczynaj\u0105ce si\u0119 od \"poetry run\" *test*integration* # Pominie komendy zawieraj\u0105ce \"test\" i \"integration\" # === KOMENTARZE === # To jest komentarz - b\u0119dzie zignorowany # Puste linie te\u017c s\u0105 ignorowane # === KATEGORIE KOMEND === # Komendy interaktywne/blokuj\u0105ce npm run start *watch* *serve* # Komendy deployment/destrukcyjne *publish* *deploy* *release* # Wolne/zasobo\u017cerne komendy tox *integration* *docker*build* \ud83c\udfaf Przyk\u0142ady u\u017cycia: \u00b6 1. Pierwszy raz - generowanie template: \u00b6 $ domd --generate-ignore \ud83d\udcdd Generating .doignore template... \u2705 Created .doignore template at /home/user/project/.doignore \ud83d\udca1 Edit this file to customize which commands to skip \ud83d\udcd6 See examples and patterns in the template 2. Sprawdzenie co b\u0119dzie ignorowane: \u00b6 $ domd --show-ignored \ud83d\udd0d Scanning commands and showing ignore status... \ud83d\udcca Command Analysis Results: Total commands found: 64 \ud83e\uddea Commands to test: 45 \ud83d\udeab Commands to ignore: 19 \ud83d\udeab Commands that will be IGNORED: ( based on .doignore rules ) \ud83d\udccb exact match: poetry run domd: \ud83d\udeab poetry run domd ( pyproject.toml ) \ud83d\udccb pattern match: *serve*: \ud83d\udeab make serve-docs ( Makefile ) \ud83d\udeab poetry run mkdocs serve ( pyproject.toml ) \ud83d\udccb pattern match: tox: \ud83d\udeab tox ( tox.ini ) \ud83d\udeab tox -e py38 ( tox.ini ) \ud83d\udeab tox -e py39 ( tox.ini ) \ud83d\udeab tox -e py310 ( tox.ini ) \ud83d\udeab tox -e py311 ( tox.ini ) \ud83d\udeab tox -e py312 ( tox.ini ) \ud83e\uddea Commands that will be TESTED: 1 . python -m pytest Source: pyproject.toml Description: Run pytest tests 2 . make test Source: Makefile Description: Make target: test ... \ud83d\udca1 To modify ignore rules, edit: /home/user/project/.doignore 3. Inicjalizacja z .doignore: \u00b6 $ domd --init-only TodoMD v0.1.1 - Project Command Detector with .doignore \ud83d\udd0d Project: /home/user/my-project \ud83d\udcdd TODO file: TODO.md \ud83d\udd27 Script file: todo.sh \ud83d\udeab Ignore file: .doignore \ud83d\udd0d Scanning project: /home/user/my-project \ud83d\udccb Found .doignore file with ignore rules \u2705 Found 64 total commands \ud83d\udeab Ignored 19 commands ( via .doignore ) \ud83e\uddea Will test 45 commands \ud83d\udcdd Created TODO.md with command status \ud83d\udd27 Created todo.sh executable script \u2705 Initialization complete! \ud83d\udccb Created TODO.md with 45 testable commands \ud83d\udd27 Created executable todo.sh \ud83d\udeab Ignored 19 commands via .doignore \ud83d\udca1 Next steps: \u2022 Review and edit .doignore to adjust ignored commands \u2022 Run: ./todo.sh to execute commands manually \u2022 Or run: domd to test with TodoMD \u2022 Use: domd --show-ignored to see ignored commands 4. Pe\u0142ne uruchomienie z filtrowaniem: \u00b6 $ domd TodoMD v0.1.1 - Project Command Detector with .doignore \ud83d\udd0d Project: /home/user/my-project \ud83d\udcdd TODO file: TODO.md \ud83d\udd27 Script file: todo.sh \ud83d\udeab Ignore file: .doignore \ud83d\udd0d Scanning project: /home/user/my-project \ud83d\udccb Found .doignore file with ignore rules \u2705 Found 64 total commands \ud83d\udeab Ignored 19 commands ( via .doignore ) \ud83e\uddea Will test 45 commands \ud83d\udcdd Created TODO.md with command status \ud83d\udd27 Created todo.sh executable script \ud83e\uddea Testing 45 commands... \ud83d\udeab Ignoring 19 commands via .doignore \ud83d\udcca Progress will be updated in TODO.md [ 1 /45 ] Testing: Run pytest tests \u2705 Command succeeded: Run pytest tests [ 2 /45 ] Testing: Make target: test \u2705 Command succeeded: Make target: test [ 3 /45 ] Testing: Make target: build \u274c Command failed: Make target: build ... ================================================== EXECUTION SUMMARY ================================================== \ud83d\udcca Results: Total commands found: 64 Commands tested: 45 Commands ignored: 19 ( via .doignore ) \u2705 Successful: 42 \u274c Failed: 3 \ud83d\udcc8 Success rate: 93 .3% \ud83d\udcdd Files: \ud83d\udccb TODO file: TODO.md \ud83d\udd27 Script file: todo.sh \ud83d\udeab Ignore file: .doignore \ud83d\udd27 Next steps: 1 . Review failed commands in TODO.md 2 . Add problematic commands to .doignore 3 . Edit todo.sh if needed 4 . Re-run: domd \ud83d\udeab Ignored commands: 19 commands were skipped via .doignore Use --show-ignored to see which commands are ignored \ud83d\udccb TODO.md z informacjami o ignorowanych: \u00b6 # TODO - Project Commands Status **\ud83d\udd04 INITIALIZED** - Generated by TodoMD v0.1.1 **Created:** 2025-06-06 15:30:00 **Project:** /home/user/my-project **Total Commands Found:** 64 **Commands to Test:** 45 **Ignored Commands:** 19 ## \ud83d\udcca Current Status - **Total Found:** 64 - **Will Test:** 45 - **Ignored:** 19 (via .doignore) - **Tested:** 0/45 - **Successful:** 0 - **Failed:** 0 - **Progress:** 0.0% ## \ud83e\uddea Commands To Test | # | Status | Command | Source | Description | |---|--------|---------|--------|-------------| | 1 | \u23f3 Pending | `python -m pytest` | `pyproject.toml` | Run pytest tests | | 2 | \u23f3 Pending | `make test` | `Makefile` | Make target: test | | 3 | \u23f3 Pending | `make build` | `Makefile` | Make target: build | ... ## \ud83d\udeab Ignored Commands (19) These commands are skipped based on .doignore rules: | Command | Source | Description | Ignore Reason | |---------|--------|-------------|---------------| | `poetry run domd` | `pyproject.toml` | Poetry script: domd | exact match: poetry run domd | | `make serve-docs` | `Makefile` | Make target: serve-docs | pattern match: *serve* | | `tox` | `tox.ini` | Run all tox environments | exact match: tox | | `tox -e py38` | `tox.ini` | Tox environment: py38 | pattern match: tox* | ... ## \u274c Failed Commands *No failed commands yet - testing not started* ## \u2705 Successful Commands *No successful commands yet - testing not started* --- \ud83d\udca1 **Next Steps:** 1. Run: `domd` to start testing commands 2. Or run: `./todo.sh` to execute all commands manually 3. Edit `.doignore` to skip additional commands 4. Monitor this file for real-time updates during testing \ud83c\udfa8 Zaawansowane wzorce w .doignore: \u00b6 1. Kategorie problem\u00f3w: \u00b6 # === REKURENCJA/SELF-REFERENCE === poetry run domd poetry run project-detector domd *self* # === INTERAKTYWNE/BLOKUJ\u0104CE === npm run dev npm run start *serve* *watch* *interactive* # === DEPLOYMENT/DESTRUKCYJNE === *publish* *deploy* *release* git push* *production* # === WOLNE/ZASOBO\u017bERNE === tox *integration* *e2e* *benchmark* *docker*build* *slow* # === SYSTEM/UPRAWNIENIA === sudo * systemctl * *root* # === CLEANUP/DESTRUKCYJNE === *clean* *purge* *delete* rm -rf* 2. Specific project patterns: \u00b6 # === PROJEKT-SPECIFIC === # Dostosuj do swojego projektu: # Django python manage.py runserver *migrate* *collectstatic* # React/Vue npm run serve yarn serve *dev-server* # Docker docker-compose up *docker*run* *container* # Database *database* *db-migrate* *seed* # Monitoring/Logs *logs* *monitor* *metrics* \ud83d\udd27 Instrukcja implementacji: \u00b6 1. Zamie\u0144 pliki: \u00b6 # Zamie\u0144 na nowe wersje: # - detector.py \u2192 enhanced_detector_with_ignore # - cli.py \u2192 enhanced_cli_with_ignore 2. Reinstaluj: \u00b6 pip install -e . 3. Przetestuj nowe funkcje: \u00b6 # Wygeneruj template domd --generate-ignore # Edytuj .doignore nano .doignore # Sprawd\u017a co b\u0119dzie ignorowane domd --show-ignored # Uruchom z filtrowaniem domd --init-only \u26a1 Tw\u00f3j konkretny przypadek: \u00b6 Problem z rekurencj\u0105: \u00b6 # Dodaj do .doignore: poetry run domd poetry run project-detector poetry run cmd-detector domd Problematyczne tox commands: \u00b6 # Dodaj do .doignore: tox tox -e * *tox* Wolne/blokuj\u0105ce komendy: \u00b6 # Dodaj do .doignore: *serve* *watch* *dev* make serve-docs make watch-test \ud83c\udfaf Korzy\u015bci .domdignore: \u00b6 \u2705 Automatyczne filtrowanie: \u00b6 Brak rekurencji - nie uruchamia sam siebie Pomija blokuj\u0105ce - \u017cadnych hang-up na interaktywnych komendach Izoluje problemy - testuje tylko co ma sens \u2705 Kontrola projektu: \u00b6 Dostosowanie do projektu - ka\u017cdy projekt ma swoje ignorowane komendy Wzorce i dok\u0142adne dopasowania - flexibilne regu\u0142y Wersjonowanie - .domdignore mo\u017cna commitowa\u0107 do repo \u2705 Transparency: \u00b6 Podgl\u0105d przed uruchomieniem - --show-ignored Raporty w TODO.md - wida\u0107 co zosta\u0142o pomini\u0119te i dlaczego \u0141atwa modyfikacja - po prostu edytuj .domdignore \u2705 Zero-configuration dla problem\u00f3w: \u00b6 Template z przyk\u0142adami - gotowe wzorce dla typowych problem\u00f3w Smart defaults - automatycznie pomija oczywiste problemy Project-specific - dostosowuje si\u0119 do ka\u017cdego projektu \ud83c\udf89 Podsumowanie: \u00b6 Problem w 100% rozwi\u0105zany! Teraz TodoMD: \u2705 Automatycznie pomija problematyczne komendy via .domdignore \u2705 Generuje template z typowymi ignorowanymi komendami \u2705 Pokazuje podgl\u0105d co b\u0119dzie ignorowane przed uruchomieniem \u2705 Raportuje w TODO.md kt\u00f3re komendy by\u0142y pomini\u0119te i dlaczego \u2705 Supportuje wzorce - dok\u0142adne dopasowania i wildcards \u2705 Zero rekurencji - nie uruchomi sam siebie przez przypadek Zamie\u0144 2 pliki (detector.py i cli.py) i b\u0119dziesz mie\u0107 pe\u0142n\u0105 kontrol\u0119 nad tym, kt\u00f3re komendy s\u0105 testowane! \ud83d\ude80","title":"\ud83d\udccb .doignore - Instrukcja u\u017cycia"},{"location":"domdignore/#doignore-instrukcja-uzycia","text":"","title":"\ud83d\udccb .doignore - Instrukcja u\u017cycia"},{"location":"domdignore/#problem-rozwiazany","text":"Doda\u0142em kompletny system .doignore do TodoMD! Teraz mo\u017cesz \u0142atwo pomija\u0107 problematyczne komendy bez ich r\u0119cznego usuwania.","title":"\u2705 Problem rozwi\u0105zany!"},{"location":"domdignore/#nowe-funkcje","text":"","title":"\ud83d\ude80 Nowe funkcje:"},{"location":"domdignore/#1-automatyczne-filtrowanie-komend","text":"# TodoMD automatycznie pominie komendy z .doignore domd","title":"1. Automatyczne filtrowanie komend"},{"location":"domdignore/#2-generowanie-template-doignore","text":"# Stw\u00f3rz plik .doignore z przyk\u0142adami domd --generate-ignore","title":"2. Generowanie template .doignore"},{"location":"domdignore/#3-podglad-ignorowanych-komend","text":"# Zobacz kt\u00f3re komendy b\u0119d\u0105 pomini\u0119te domd --show-ignored","title":"3. Podgl\u0105d ignorowanych komend"},{"location":"domdignore/#4-wasny-plik-ignore","text":"# U\u017cyj niestandardowego pliku domd --ignore-file my-ignores.txt","title":"4. W\u0142asny plik ignore"},{"location":"domdignore/#skadnia-doignore","text":"# .doignore - TodoMD Ignore File # === DOK\u0141ADNE DOPASOWANIE === poetry run domd # Pominie dok\u0142adnie t\u0119 komend\u0119 npm run dev # Pominie dok\u0142adnie \"npm run dev\" # === WZORCE (PATTERNS) === *serve* # Pominie wszystkie komendy zawieraj\u0105ce \"serve\" poetry run * # Pominie wszystkie komendy zaczynaj\u0105ce si\u0119 od \"poetry run\" *test*integration* # Pominie komendy zawieraj\u0105ce \"test\" i \"integration\" # === KOMENTARZE === # To jest komentarz - b\u0119dzie zignorowany # Puste linie te\u017c s\u0105 ignorowane # === KATEGORIE KOMEND === # Komendy interaktywne/blokuj\u0105ce npm run start *watch* *serve* # Komendy deployment/destrukcyjne *publish* *deploy* *release* # Wolne/zasobo\u017cerne komendy tox *integration* *docker*build*","title":"\ud83d\udcdd Sk\u0142adnia .doignore:"},{"location":"domdignore/#przykady-uzycia","text":"","title":"\ud83c\udfaf Przyk\u0142ady u\u017cycia:"},{"location":"domdignore/#1-pierwszy-raz-generowanie-template","text":"$ domd --generate-ignore \ud83d\udcdd Generating .doignore template... \u2705 Created .doignore template at /home/user/project/.doignore \ud83d\udca1 Edit this file to customize which commands to skip \ud83d\udcd6 See examples and patterns in the template","title":"1. Pierwszy raz - generowanie template:"},{"location":"domdignore/#2-sprawdzenie-co-bedzie-ignorowane","text":"$ domd --show-ignored \ud83d\udd0d Scanning commands and showing ignore status... \ud83d\udcca Command Analysis Results: Total commands found: 64 \ud83e\uddea Commands to test: 45 \ud83d\udeab Commands to ignore: 19 \ud83d\udeab Commands that will be IGNORED: ( based on .doignore rules ) \ud83d\udccb exact match: poetry run domd: \ud83d\udeab poetry run domd ( pyproject.toml ) \ud83d\udccb pattern match: *serve*: \ud83d\udeab make serve-docs ( Makefile ) \ud83d\udeab poetry run mkdocs serve ( pyproject.toml ) \ud83d\udccb pattern match: tox: \ud83d\udeab tox ( tox.ini ) \ud83d\udeab tox -e py38 ( tox.ini ) \ud83d\udeab tox -e py39 ( tox.ini ) \ud83d\udeab tox -e py310 ( tox.ini ) \ud83d\udeab tox -e py311 ( tox.ini ) \ud83d\udeab tox -e py312 ( tox.ini ) \ud83e\uddea Commands that will be TESTED: 1 . python -m pytest Source: pyproject.toml Description: Run pytest tests 2 . make test Source: Makefile Description: Make target: test ... \ud83d\udca1 To modify ignore rules, edit: /home/user/project/.doignore","title":"2. Sprawdzenie co b\u0119dzie ignorowane:"},{"location":"domdignore/#3-inicjalizacja-z-doignore","text":"$ domd --init-only TodoMD v0.1.1 - Project Command Detector with .doignore \ud83d\udd0d Project: /home/user/my-project \ud83d\udcdd TODO file: TODO.md \ud83d\udd27 Script file: todo.sh \ud83d\udeab Ignore file: .doignore \ud83d\udd0d Scanning project: /home/user/my-project \ud83d\udccb Found .doignore file with ignore rules \u2705 Found 64 total commands \ud83d\udeab Ignored 19 commands ( via .doignore ) \ud83e\uddea Will test 45 commands \ud83d\udcdd Created TODO.md with command status \ud83d\udd27 Created todo.sh executable script \u2705 Initialization complete! \ud83d\udccb Created TODO.md with 45 testable commands \ud83d\udd27 Created executable todo.sh \ud83d\udeab Ignored 19 commands via .doignore \ud83d\udca1 Next steps: \u2022 Review and edit .doignore to adjust ignored commands \u2022 Run: ./todo.sh to execute commands manually \u2022 Or run: domd to test with TodoMD \u2022 Use: domd --show-ignored to see ignored commands","title":"3. Inicjalizacja z .doignore:"},{"location":"domdignore/#4-pene-uruchomienie-z-filtrowaniem","text":"$ domd TodoMD v0.1.1 - Project Command Detector with .doignore \ud83d\udd0d Project: /home/user/my-project \ud83d\udcdd TODO file: TODO.md \ud83d\udd27 Script file: todo.sh \ud83d\udeab Ignore file: .doignore \ud83d\udd0d Scanning project: /home/user/my-project \ud83d\udccb Found .doignore file with ignore rules \u2705 Found 64 total commands \ud83d\udeab Ignored 19 commands ( via .doignore ) \ud83e\uddea Will test 45 commands \ud83d\udcdd Created TODO.md with command status \ud83d\udd27 Created todo.sh executable script \ud83e\uddea Testing 45 commands... \ud83d\udeab Ignoring 19 commands via .doignore \ud83d\udcca Progress will be updated in TODO.md [ 1 /45 ] Testing: Run pytest tests \u2705 Command succeeded: Run pytest tests [ 2 /45 ] Testing: Make target: test \u2705 Command succeeded: Make target: test [ 3 /45 ] Testing: Make target: build \u274c Command failed: Make target: build ... ================================================== EXECUTION SUMMARY ================================================== \ud83d\udcca Results: Total commands found: 64 Commands tested: 45 Commands ignored: 19 ( via .doignore ) \u2705 Successful: 42 \u274c Failed: 3 \ud83d\udcc8 Success rate: 93 .3% \ud83d\udcdd Files: \ud83d\udccb TODO file: TODO.md \ud83d\udd27 Script file: todo.sh \ud83d\udeab Ignore file: .doignore \ud83d\udd27 Next steps: 1 . Review failed commands in TODO.md 2 . Add problematic commands to .doignore 3 . Edit todo.sh if needed 4 . Re-run: domd \ud83d\udeab Ignored commands: 19 commands were skipped via .doignore Use --show-ignored to see which commands are ignored","title":"4. Pe\u0142ne uruchomienie z filtrowaniem:"},{"location":"domdignore/#todomd-z-informacjami-o-ignorowanych","text":"# TODO - Project Commands Status **\ud83d\udd04 INITIALIZED** - Generated by TodoMD v0.1.1 **Created:** 2025-06-06 15:30:00 **Project:** /home/user/my-project **Total Commands Found:** 64 **Commands to Test:** 45 **Ignored Commands:** 19 ## \ud83d\udcca Current Status - **Total Found:** 64 - **Will Test:** 45 - **Ignored:** 19 (via .doignore) - **Tested:** 0/45 - **Successful:** 0 - **Failed:** 0 - **Progress:** 0.0% ## \ud83e\uddea Commands To Test | # | Status | Command | Source | Description | |---|--------|---------|--------|-------------| | 1 | \u23f3 Pending | `python -m pytest` | `pyproject.toml` | Run pytest tests | | 2 | \u23f3 Pending | `make test` | `Makefile` | Make target: test | | 3 | \u23f3 Pending | `make build` | `Makefile` | Make target: build | ... ## \ud83d\udeab Ignored Commands (19) These commands are skipped based on .doignore rules: | Command | Source | Description | Ignore Reason | |---------|--------|-------------|---------------| | `poetry run domd` | `pyproject.toml` | Poetry script: domd | exact match: poetry run domd | | `make serve-docs` | `Makefile` | Make target: serve-docs | pattern match: *serve* | | `tox` | `tox.ini` | Run all tox environments | exact match: tox | | `tox -e py38` | `tox.ini` | Tox environment: py38 | pattern match: tox* | ... ## \u274c Failed Commands *No failed commands yet - testing not started* ## \u2705 Successful Commands *No successful commands yet - testing not started* --- \ud83d\udca1 **Next Steps:** 1. Run: `domd` to start testing commands 2. Or run: `./todo.sh` to execute all commands manually 3. Edit `.doignore` to skip additional commands 4. Monitor this file for real-time updates during testing","title":"\ud83d\udccb TODO.md z informacjami o ignorowanych:"},{"location":"domdignore/#zaawansowane-wzorce-w-doignore","text":"","title":"\ud83c\udfa8 Zaawansowane wzorce w .doignore:"},{"location":"domdignore/#1-kategorie-problemow","text":"# === REKURENCJA/SELF-REFERENCE === poetry run domd poetry run project-detector domd *self* # === INTERAKTYWNE/BLOKUJ\u0104CE === npm run dev npm run start *serve* *watch* *interactive* # === DEPLOYMENT/DESTRUKCYJNE === *publish* *deploy* *release* git push* *production* # === WOLNE/ZASOBO\u017bERNE === tox *integration* *e2e* *benchmark* *docker*build* *slow* # === SYSTEM/UPRAWNIENIA === sudo * systemctl * *root* # === CLEANUP/DESTRUKCYJNE === *clean* *purge* *delete* rm -rf*","title":"1. Kategorie problem\u00f3w:"},{"location":"domdignore/#2-specific-project-patterns","text":"# === PROJEKT-SPECIFIC === # Dostosuj do swojego projektu: # Django python manage.py runserver *migrate* *collectstatic* # React/Vue npm run serve yarn serve *dev-server* # Docker docker-compose up *docker*run* *container* # Database *database* *db-migrate* *seed* # Monitoring/Logs *logs* *monitor* *metrics*","title":"2. Specific project patterns:"},{"location":"domdignore/#instrukcja-implementacji","text":"","title":"\ud83d\udd27 Instrukcja implementacji:"},{"location":"domdignore/#1-zamien-pliki","text":"# Zamie\u0144 na nowe wersje: # - detector.py \u2192 enhanced_detector_with_ignore # - cli.py \u2192 enhanced_cli_with_ignore","title":"1. Zamie\u0144 pliki:"},{"location":"domdignore/#2-reinstaluj","text":"pip install -e .","title":"2. Reinstaluj:"},{"location":"domdignore/#3-przetestuj-nowe-funkcje","text":"# Wygeneruj template domd --generate-ignore # Edytuj .doignore nano .doignore # Sprawd\u017a co b\u0119dzie ignorowane domd --show-ignored # Uruchom z filtrowaniem domd --init-only","title":"3. Przetestuj nowe funkcje:"},{"location":"domdignore/#twoj-konkretny-przypadek","text":"","title":"\u26a1 Tw\u00f3j konkretny przypadek:"},{"location":"domdignore/#problem-z-rekurencja","text":"# Dodaj do .doignore: poetry run domd poetry run project-detector poetry run cmd-detector domd","title":"Problem z rekurencj\u0105:"},{"location":"domdignore/#problematyczne-tox-commands","text":"# Dodaj do .doignore: tox tox -e * *tox*","title":"Problematyczne tox commands:"},{"location":"domdignore/#wolneblokujace-komendy","text":"# Dodaj do .doignore: *serve* *watch* *dev* make serve-docs make watch-test","title":"Wolne/blokuj\u0105ce komendy:"},{"location":"domdignore/#korzysci-domdignore","text":"","title":"\ud83c\udfaf Korzy\u015bci .domdignore:"},{"location":"domdignore/#automatyczne-filtrowanie","text":"Brak rekurencji - nie uruchamia sam siebie Pomija blokuj\u0105ce - \u017cadnych hang-up na interaktywnych komendach Izoluje problemy - testuje tylko co ma sens","title":"\u2705 Automatyczne filtrowanie:"},{"location":"domdignore/#kontrola-projektu","text":"Dostosowanie do projektu - ka\u017cdy projekt ma swoje ignorowane komendy Wzorce i dok\u0142adne dopasowania - flexibilne regu\u0142y Wersjonowanie - .domdignore mo\u017cna commitowa\u0107 do repo","title":"\u2705 Kontrola projektu:"},{"location":"domdignore/#transparency","text":"Podgl\u0105d przed uruchomieniem - --show-ignored Raporty w TODO.md - wida\u0107 co zosta\u0142o pomini\u0119te i dlaczego \u0141atwa modyfikacja - po prostu edytuj .domdignore","title":"\u2705 Transparency:"},{"location":"domdignore/#zero-configuration-dla-problemow","text":"Template z przyk\u0142adami - gotowe wzorce dla typowych problem\u00f3w Smart defaults - automatycznie pomija oczywiste problemy Project-specific - dostosowuje si\u0119 do ka\u017cdego projektu","title":"\u2705 Zero-configuration dla problem\u00f3w:"},{"location":"domdignore/#podsumowanie","text":"Problem w 100% rozwi\u0105zany! Teraz TodoMD: \u2705 Automatycznie pomija problematyczne komendy via .domdignore \u2705 Generuje template z typowymi ignorowanymi komendami \u2705 Pokazuje podgl\u0105d co b\u0119dzie ignorowane przed uruchomieniem \u2705 Raportuje w TODO.md kt\u00f3re komendy by\u0142y pomini\u0119te i dlaczego \u2705 Supportuje wzorce - dok\u0142adne dopasowania i wildcards \u2705 Zero rekurencji - nie uruchomi sam siebie przez przypadek Zamie\u0144 2 pliki (detector.py i cli.py) i b\u0119dziesz mie\u0107 pe\u0142n\u0105 kontrol\u0119 nad tym, kt\u00f3re komendy s\u0105 testowane! \ud83d\ude80","title":"\ud83c\udf89 Podsumowanie:"},{"location":"done/","text":"\u2705 DONE - Successfully Working Commands \u00b6 \ud83c\udf89 Generated by TodoMD - List of all working project commands Last Updated: 2025-06-06 16:45:23 Project: /home/user/my-project Total Working Commands: 18 \ud83d\udcca Summary \u00b6 \u2705 18 commands are working correctly These commands have been tested and are functioning properly. You can safely use them in your development workflow. \ud83d\udfe2 Working Commands \u00b6 \ud83d\udcc4 From pyproject.toml \u00b6 \u2705 Run pytest tests \u00b6 Command: python -m pytest Execution Time: 2.34s Type: pytest Status: \ud83d\udfe2 WORKING \u2705 Poetry script: format \u00b6 Command: poetry run format Execution Time: 1.12s Type: poetry_script Status: \ud83d\udfe2 WORKING \ud83d\udcc4 From Makefile \u00b6 \u2705 Make target: test \u00b6 Command: make test Execution Time: 3.45s Type: make_target Status: \ud83d\udfe2 WORKING \u2705 Make target: lint \u00b6 Command: make lint Execution Time: 0.89s Type: make_target Status: \ud83d\udfe2 WORKING \u2705 Make target: format \u00b6 Command: make format Execution Time: 1.23s Type: make_target Status: \ud83d\udfe2 WORKING \u2705 Make target: clean \u00b6 Command: make clean Execution Time: 0.45s Type: make_target Status: \ud83d\udfe2 WORKING \u2705 Make target: version \u00b6 Command: make version Execution Time: 0.12s Type: make_target Status: \ud83d\udfe2 WORKING \u2705 Make target: deps-show \u00b6 Command: make deps-show Execution Time: 1.67s Type: make_target Status: \ud83d\udfe2 WORKING \u2705 Make target: env-info \u00b6 Command: make env-info Execution Time: 0.78s Type: make_target Status: \ud83d\udfe2 WORKING \ud83d\udcc4 From package.json \u00b6 \u2705 NPM script: lint \u00b6 Command: npm run lint Execution Time: 2.56s Type: npm_script Status: \ud83d\udfe2 WORKING \u2705 NPM script: format \u00b6 Command: npm run format Execution Time: 1.34s Type: npm_script Status: \ud83d\udfe2 WORKING \ud83d\udd04 Updating This File \u00b6 This file is automatically updated when commands are tested. To refresh the status: Run: domd to test all commands Working commands will appear here Failed commands will be moved to TODO.md for fixing Last test run: 2025-06-06 16:45:23","title":"\u2705 DONE - Successfully Working Commands"},{"location":"done/#done-successfully-working-commands","text":"\ud83c\udf89 Generated by TodoMD - List of all working project commands Last Updated: 2025-06-06 16:45:23 Project: /home/user/my-project Total Working Commands: 18","title":"\u2705 DONE - Successfully Working Commands"},{"location":"done/#summary","text":"\u2705 18 commands are working correctly These commands have been tested and are functioning properly. You can safely use them in your development workflow.","title":"\ud83d\udcca Summary"},{"location":"done/#working-commands","text":"","title":"\ud83d\udfe2 Working Commands"},{"location":"done/#from-pyprojecttoml","text":"","title":"\ud83d\udcc4 From pyproject.toml"},{"location":"done/#run-pytest-tests","text":"Command: python -m pytest Execution Time: 2.34s Type: pytest Status: \ud83d\udfe2 WORKING","title":"\u2705 Run pytest tests"},{"location":"done/#poetry-script-format","text":"Command: poetry run format Execution Time: 1.12s Type: poetry_script Status: \ud83d\udfe2 WORKING","title":"\u2705 Poetry script: format"},{"location":"done/#from-makefile","text":"","title":"\ud83d\udcc4 From Makefile"},{"location":"done/#make-target-test","text":"Command: make test Execution Time: 3.45s Type: make_target Status: \ud83d\udfe2 WORKING","title":"\u2705 Make target: test"},{"location":"done/#make-target-lint","text":"Command: make lint Execution Time: 0.89s Type: make_target Status: \ud83d\udfe2 WORKING","title":"\u2705 Make target: lint"},{"location":"done/#make-target-format","text":"Command: make format Execution Time: 1.23s Type: make_target Status: \ud83d\udfe2 WORKING","title":"\u2705 Make target: format"},{"location":"done/#make-target-clean","text":"Command: make clean Execution Time: 0.45s Type: make_target Status: \ud83d\udfe2 WORKING","title":"\u2705 Make target: clean"},{"location":"done/#make-target-version","text":"Command: make version Execution Time: 0.12s Type: make_target Status: \ud83d\udfe2 WORKING","title":"\u2705 Make target: version"},{"location":"done/#make-target-deps-show","text":"Command: make deps-show Execution Time: 1.67s Type: make_target Status: \ud83d\udfe2 WORKING","title":"\u2705 Make target: deps-show"},{"location":"done/#make-target-env-info","text":"Command: make env-info Execution Time: 0.78s Type: make_target Status: \ud83d\udfe2 WORKING","title":"\u2705 Make target: env-info"},{"location":"done/#from-packagejson","text":"","title":"\ud83d\udcc4 From package.json"},{"location":"done/#npm-script-lint","text":"Command: npm run lint Execution Time: 2.56s Type: npm_script Status: \ud83d\udfe2 WORKING","title":"\u2705 NPM script: lint"},{"location":"done/#npm-script-format","text":"Command: npm run format Execution Time: 1.34s Type: npm_script Status: \ud83d\udfe2 WORKING","title":"\u2705 NPM script: format"},{"location":"done/#updating-this-file","text":"This file is automatically updated when commands are tested. To refresh the status: Run: domd to test all commands Working commands will appear here Failed commands will be moved to TODO.md for fixing Last test run: 2025-06-06 16:45:23","title":"\ud83d\udd04 Updating This File"},{"location":"how-to-llm/","text":"\ud83d\udccb INSTRUKCJA - DONE.md i TODO.md dla LLM \u00b6 \u2705 Problem rozwi\u0105zany w 100%! \u00b6 Stworzy\u0142em kompletny system dw\u00f3ch plik\u00f3w : - DONE.md - dzia\u0142aj\u0105ce komendy oznaczone na zielono \u2705 - TODO.md - zadania dla LLM z konkretnymi instrukcjami naprawy \ud83c\udfaf Jak to dzia\u0142a: \u00b6 1. DONE.md - Lista sukces\u00f3w \u2705 \u00b6 Wszystkie dzia\u0142aj\u0105ce komendy z zielonymi oznaczeniami Czas wykonania ka\u017cdej komendy Grupowanie wed\u0142ug \u017ar\u00f3d\u0142a (package.json, Makefile, etc.) Status \"WORKING\" dla ka\u017cdej komendy 2. TODO.md - Lista zada\u0144 dla LLM \ud83e\udd16 \u00b6 Instrukcje dla LLM na g\u00f3rze pliku Ka\u017cda niedzia\u0142aj\u0105ca komenda jako osobny header ### [ ] Pe\u0142ny kod b\u0142\u0119du w blokach source code Szczeg\u00f3\u0142owe sugestie napraw dla ka\u017cdego b\u0142\u0119du Kryteria uko\u0144czenia zadania \ud83d\udcca Przyk\u0142ad struktury plik\u00f3w: \u00b6 DONE.md: \u00b6 # \u2705 DONE - Successfully Working Commands ## \ud83d\udfe2 Working Commands ### \ud83d\udcc4 From Makefile #### \u2705 Make target: test **Command:** `make test` **Execution Time:** 3.45s **Status:** \ud83d\udfe2 **WORKING** #### \u2705 Make target: lint **Command:** `make lint` **Execution Time:** 0.89s **Status:** \ud83d\udfe2 **WORKING** TODO.md: \u00b6 # \ud83e\udd16 TODO - LLM Task List for Command Fixes **\ud83d\udccb INSTRUCTIONS FOR LLM:** This file contains broken commands that need fixing. Each task has error details and fix suggestions. ## \ud83d\udd27 Tasks to Fix (6 commands) ### [ ] Task 1: NPM script - build **\ud83d\udccb Command:** `npm run build` **\ud83d\udcc1 Source:** `package.json` **\ud83d\udd34 Return Code:** 1 #### \ud83d\udd34 Error Output: ```bash # Command that failed: npm run build # Error output: npm ERR! missing script: build \ud83d\udca1 Suggested Fix Actions: \u00b6 Check package.json for script definition errors Add missing \"build\" script to package.json Verify build tools are installed --- ## \ud83d\ude80 **Implementacja (3 kroki):** ### **1. Zamie\u0144 plik detector.py:** ```bash # Zamie\u0144 src/todomd/detector.py na now\u0105 wersj\u0119 z artefaktu: # done_md_generator 2. Reinstaluj paczk\u0119: \u00b6 pip install -e . 3. Przetestuj: \u00b6 # Uruchom testowanie domd # Sprawd\u017a wygenerowane pliki ls -la TODO.md DONE.md cat DONE.md # Zobacz dzia\u0142aj\u0105ce komendy cat TODO.md # Zobacz zadania dla LLM \ud83c\udfae Przyk\u0142ad u\u017cycia: \u00b6 Pierwszy run: \u00b6 $ domd TodoMD v0.1.1 - Project Command Detector with .doignore \ud83d\udd0d Project: /home/user/my-project \ud83d\udccb Found .doignore file with ignore rules \u2705 Found 64 total commands \ud83d\udeab Ignored 19 commands ( via .doignore ) \ud83e\uddea Will test 45 commands \ud83d\udcdd Created TODO.md ( LLM task list ) \u2705 Created DONE.md ( working commands ) \ud83d\udd27 Created todo.sh ( executable script ) \ud83e\uddea Testing 45 commands... [ 1 /45 ] Testing: Run pytest tests \u2705 Command succeeded: Run pytest tests [ 2 /45 ] Testing: NPM script - build \u274c Command failed: NPM script - build [ 3 /45 ] Testing: Make target - test \u2705 Command succeeded: Make target - test ... \ud83d\udcca Test Results: \u2705 Working: 39 \u2192 DONE.md \u274c Failed: 6 \u2192 TODO.md \ud83d\udeab Ignored: 19 ( via .doignore ) DONE.md (po testowaniu): \u00b6 ```markdown \u2705 DONE - Successfully Working Commands \u00b6 Total Working Commands: 39 \ud83d\udfe2 Working Commands \u00b6 \ud83d\udcc4 From pyproject.toml \u00b6 \u2705 Run pytest tests \u00b6 Command: python -m pytest Execution Time: 2.34s Status:","title":"\ud83d\udccb INSTRUKCJA - DONE.md i TODO.md dla LLM"},{"location":"how-to-llm/#instrukcja-donemd-i-todomd-dla-llm","text":"","title":"\ud83d\udccb INSTRUKCJA - DONE.md i TODO.md dla LLM"},{"location":"how-to-llm/#problem-rozwiazany-w-100","text":"Stworzy\u0142em kompletny system dw\u00f3ch plik\u00f3w : - DONE.md - dzia\u0142aj\u0105ce komendy oznaczone na zielono \u2705 - TODO.md - zadania dla LLM z konkretnymi instrukcjami naprawy","title":"\u2705 Problem rozwi\u0105zany w 100%!"},{"location":"how-to-llm/#jak-to-dziaa","text":"","title":"\ud83c\udfaf Jak to dzia\u0142a:"},{"location":"how-to-llm/#1-donemd-lista-sukcesow","text":"Wszystkie dzia\u0142aj\u0105ce komendy z zielonymi oznaczeniami Czas wykonania ka\u017cdej komendy Grupowanie wed\u0142ug \u017ar\u00f3d\u0142a (package.json, Makefile, etc.) Status \"WORKING\" dla ka\u017cdej komendy","title":"1. DONE.md - Lista sukces\u00f3w \u2705"},{"location":"how-to-llm/#2-todomd-lista-zadan-dla-llm","text":"Instrukcje dla LLM na g\u00f3rze pliku Ka\u017cda niedzia\u0142aj\u0105ca komenda jako osobny header ### [ ] Pe\u0142ny kod b\u0142\u0119du w blokach source code Szczeg\u00f3\u0142owe sugestie napraw dla ka\u017cdego b\u0142\u0119du Kryteria uko\u0144czenia zadania","title":"2. TODO.md - Lista zada\u0144 dla LLM \ud83e\udd16"},{"location":"how-to-llm/#przykad-struktury-plikow","text":"","title":"\ud83d\udcca Przyk\u0142ad struktury plik\u00f3w:"},{"location":"how-to-llm/#donemd","text":"# \u2705 DONE - Successfully Working Commands ## \ud83d\udfe2 Working Commands ### \ud83d\udcc4 From Makefile #### \u2705 Make target: test **Command:** `make test` **Execution Time:** 3.45s **Status:** \ud83d\udfe2 **WORKING** #### \u2705 Make target: lint **Command:** `make lint` **Execution Time:** 0.89s **Status:** \ud83d\udfe2 **WORKING**","title":"DONE.md:"},{"location":"how-to-llm/#todomd","text":"# \ud83e\udd16 TODO - LLM Task List for Command Fixes **\ud83d\udccb INSTRUCTIONS FOR LLM:** This file contains broken commands that need fixing. Each task has error details and fix suggestions. ## \ud83d\udd27 Tasks to Fix (6 commands) ### [ ] Task 1: NPM script - build **\ud83d\udccb Command:** `npm run build` **\ud83d\udcc1 Source:** `package.json` **\ud83d\udd34 Return Code:** 1 #### \ud83d\udd34 Error Output: ```bash # Command that failed: npm run build # Error output: npm ERR! missing script: build","title":"TODO.md:"},{"location":"how-to-llm/#suggested-fix-actions","text":"Check package.json for script definition errors Add missing \"build\" script to package.json Verify build tools are installed --- ## \ud83d\ude80 **Implementacja (3 kroki):** ### **1. Zamie\u0144 plik detector.py:** ```bash # Zamie\u0144 src/todomd/detector.py na now\u0105 wersj\u0119 z artefaktu: # done_md_generator","title":"\ud83d\udca1 Suggested Fix Actions:"},{"location":"how-to-llm/#2-reinstaluj-paczke","text":"pip install -e .","title":"2. Reinstaluj paczk\u0119:"},{"location":"how-to-llm/#3-przetestuj","text":"# Uruchom testowanie domd # Sprawd\u017a wygenerowane pliki ls -la TODO.md DONE.md cat DONE.md # Zobacz dzia\u0142aj\u0105ce komendy cat TODO.md # Zobacz zadania dla LLM","title":"3. Przetestuj:"},{"location":"how-to-llm/#przykad-uzycia","text":"","title":"\ud83c\udfae Przyk\u0142ad u\u017cycia:"},{"location":"how-to-llm/#pierwszy-run","text":"$ domd TodoMD v0.1.1 - Project Command Detector with .doignore \ud83d\udd0d Project: /home/user/my-project \ud83d\udccb Found .doignore file with ignore rules \u2705 Found 64 total commands \ud83d\udeab Ignored 19 commands ( via .doignore ) \ud83e\uddea Will test 45 commands \ud83d\udcdd Created TODO.md ( LLM task list ) \u2705 Created DONE.md ( working commands ) \ud83d\udd27 Created todo.sh ( executable script ) \ud83e\uddea Testing 45 commands... [ 1 /45 ] Testing: Run pytest tests \u2705 Command succeeded: Run pytest tests [ 2 /45 ] Testing: NPM script - build \u274c Command failed: NPM script - build [ 3 /45 ] Testing: Make target - test \u2705 Command succeeded: Make target - test ... \ud83d\udcca Test Results: \u2705 Working: 39 \u2192 DONE.md \u274c Failed: 6 \u2192 TODO.md \ud83d\udeab Ignored: 19 ( via .doignore )","title":"Pierwszy run:"},{"location":"how-to-llm/#donemd-po-testowaniu","text":"```markdown","title":"DONE.md (po testowaniu):"},{"location":"how-to-llm/#done-successfully-working-commands","text":"Total Working Commands: 39","title":"\u2705 DONE - Successfully Working Commands"},{"location":"how-to-llm/#working-commands","text":"","title":"\ud83d\udfe2 Working Commands"},{"location":"how-to-llm/#from-pyprojecttoml","text":"","title":"\ud83d\udcc4 From pyproject.toml"},{"location":"how-to-llm/#run-pytest-tests","text":"Command: python -m pytest Execution Time: 2.34s Status:","title":"\u2705 Run pytest tests"},{"location":"installation/","text":"\ud83d\udce5 DoMD Installation Guide \u00b6 Prerequisites \u00b6 Python 3.8 or newer pip (Python package manager) Git (optional, for installation from repository) Docker (optional, for containerized execution) Installation Methods \u00b6 1. Using pip (Recommended) \u00b6 The easiest way to install DoMD: pip install domd 2. From Source (for latest development version) \u00b6 If you want to use the latest development version: # Clone the repository git clone https://github.com/wronai/domd.git cd domd # Install in development mode pip install -e . 3. With Optional Dependencies \u00b6 DoMD supports optional dependencies for extended functionality: # With Ansible support pip install \"domd[ansible]\" # With development tools pip install \"domd[dev]\" # All optional dependencies pip install \"domd[all]\" # Using Poetry (optional) poetry add domd 4. Using Docker \u00b6 You can also use DoMD via Docker without installing it locally: docker run --rm -v $( pwd ) :/app ghcr.io/wronai/domd domd Verifying Installation \u00b6 Check if DoMD is installed correctly: domd --version You should see the version number, e.g., domd 1.0.0 . Updating \u00b6 To update DoMD to the latest version: pip install --upgrade domd Uninstalling \u00b6 To uninstall DoMD: pip uninstall domd Troubleshooting \u00b6 Permission Errors \u00b6 If you encounter permission errors during installation: pip install --user domd Or on Linux/macOS: sudo pip install domd Dependency Issues \u00b6 If you have dependency conflicts: pip install --upgrade pip setuptools wheel pip install --no-cache-dir domd Common Issues \u00b6 1. B\u0142\u0105d: \"Command not found\" \u00b6 # Sprawd\u017a czy narz\u0119dzie jest zainstalowane which npm # lub yarn, make, docker, itp. # Zainstaluj brakuj\u0105ce narz\u0119dzia sudo apt install make # Ubuntu/Debian brew install make # macOS 2. B\u0142\u0105d: \"Permission denied\" \u00b6 # Sprawd\u017a uprawnienia ls -la Makefile chmod +x scripts/build.sh # Mo\u017ce wymagane sudo dla niekt\u00f3rych komend 3. B\u0142\u0119dy timeout \u00b6 # Zwi\u0119ksz timeout dla wolnych komend domd --timeout 300 # 5 minut 4. Problemy z kodowaniem \u00b6 # Ustaw poprawne kodowanie export LANG = pl_PL.UTF-8 export LC_ALL = pl_PL.UTF-8 Tryb debugowania \u00b6 # Szczeg\u00f3\u0142owe informacje o wykonaniu domd --verbose # Tylko podgl\u0105d bez wykonywania komend domd --dry-run Aktualizacja do nowszej wersji \u00b6 Sprawdzanie wersji \u00b6 domd --version poetry show domd # je\u015bli zainstalowane przez Poetry pip show domd # je\u015bli zainstalowane przez pip Aktualizacja \u00b6 # Aktualizacja przez pip pip install --upgrade domd # Aktualizacja z repozytorium (dla instalacji deweloperskiej) git pull origin main pip install -e . \ud83d\udcde Wsparcie \u00b6 Dokumentacja : https://domd.readthedocs.io Zg\u0142oszenia b\u0142\u0119d\u00f3w : https://github.com/wronai/domd/issues Dyskusje : https://github.com/wronai/domd/discussions \ud83c\udfaf Nast\u0119pne kroki \u00b6 Po zainstalowaniu: Przejd\u017a do przewodnika u\u017cytkownika aby pozna\u0107 mo\u017cliwo\u015bci DoMD Sprawd\u017a dokumentacj\u0119 funkcji aby pozna\u0107 wszystkie opcje Do\u0142\u0105cz do spo\u0142eczno\u015bci na GitHub Discussions Gotowe do u\u017cycia! \ud83d\ude80","title":"\ud83d\udce5 DoMD Installation Guide"},{"location":"installation/#domd-installation-guide","text":"","title":"\ud83d\udce5 DoMD Installation Guide"},{"location":"installation/#prerequisites","text":"Python 3.8 or newer pip (Python package manager) Git (optional, for installation from repository) Docker (optional, for containerized execution)","title":"Prerequisites"},{"location":"installation/#installation-methods","text":"","title":"Installation Methods"},{"location":"installation/#1-using-pip-recommended","text":"The easiest way to install DoMD: pip install domd","title":"1. Using pip (Recommended)"},{"location":"installation/#2-from-source-for-latest-development-version","text":"If you want to use the latest development version: # Clone the repository git clone https://github.com/wronai/domd.git cd domd # Install in development mode pip install -e .","title":"2. From Source (for latest development version)"},{"location":"installation/#3-with-optional-dependencies","text":"DoMD supports optional dependencies for extended functionality: # With Ansible support pip install \"domd[ansible]\" # With development tools pip install \"domd[dev]\" # All optional dependencies pip install \"domd[all]\" # Using Poetry (optional) poetry add domd","title":"3. With Optional Dependencies"},{"location":"installation/#4-using-docker","text":"You can also use DoMD via Docker without installing it locally: docker run --rm -v $( pwd ) :/app ghcr.io/wronai/domd domd","title":"4. Using Docker"},{"location":"installation/#verifying-installation","text":"Check if DoMD is installed correctly: domd --version You should see the version number, e.g., domd 1.0.0 .","title":"Verifying Installation"},{"location":"installation/#updating","text":"To update DoMD to the latest version: pip install --upgrade domd","title":"Updating"},{"location":"installation/#uninstalling","text":"To uninstall DoMD: pip uninstall domd","title":"Uninstalling"},{"location":"installation/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"installation/#permission-errors","text":"If you encounter permission errors during installation: pip install --user domd Or on Linux/macOS: sudo pip install domd","title":"Permission Errors"},{"location":"installation/#dependency-issues","text":"If you have dependency conflicts: pip install --upgrade pip setuptools wheel pip install --no-cache-dir domd","title":"Dependency Issues"},{"location":"installation/#common-issues","text":"","title":"Common Issues"},{"location":"installation/#1-bad-command-not-found","text":"# Sprawd\u017a czy narz\u0119dzie jest zainstalowane which npm # lub yarn, make, docker, itp. # Zainstaluj brakuj\u0105ce narz\u0119dzia sudo apt install make # Ubuntu/Debian brew install make # macOS","title":"1. B\u0142\u0105d: \"Command not found\""},{"location":"installation/#2-bad-permission-denied","text":"# Sprawd\u017a uprawnienia ls -la Makefile chmod +x scripts/build.sh # Mo\u017ce wymagane sudo dla niekt\u00f3rych komend","title":"2. B\u0142\u0105d: \"Permission denied\""},{"location":"installation/#3-bedy-timeout","text":"# Zwi\u0119ksz timeout dla wolnych komend domd --timeout 300 # 5 minut","title":"3. B\u0142\u0119dy timeout"},{"location":"installation/#4-problemy-z-kodowaniem","text":"# Ustaw poprawne kodowanie export LANG = pl_PL.UTF-8 export LC_ALL = pl_PL.UTF-8","title":"4. Problemy z kodowaniem"},{"location":"installation/#tryb-debugowania","text":"# Szczeg\u00f3\u0142owe informacje o wykonaniu domd --verbose # Tylko podgl\u0105d bez wykonywania komend domd --dry-run","title":"Tryb debugowania"},{"location":"installation/#aktualizacja-do-nowszej-wersji","text":"","title":"Aktualizacja do nowszej wersji"},{"location":"installation/#sprawdzanie-wersji","text":"domd --version poetry show domd # je\u015bli zainstalowane przez Poetry pip show domd # je\u015bli zainstalowane przez pip","title":"Sprawdzanie wersji"},{"location":"installation/#aktualizacja","text":"# Aktualizacja przez pip pip install --upgrade domd # Aktualizacja z repozytorium (dla instalacji deweloperskiej) git pull origin main pip install -e .","title":"Aktualizacja"},{"location":"installation/#wsparcie","text":"Dokumentacja : https://domd.readthedocs.io Zg\u0142oszenia b\u0142\u0119d\u00f3w : https://github.com/wronai/domd/issues Dyskusje : https://github.com/wronai/domd/discussions","title":"\ud83d\udcde Wsparcie"},{"location":"installation/#nastepne-kroki","text":"Po zainstalowaniu: Przejd\u017a do przewodnika u\u017cytkownika aby pozna\u0107 mo\u017cliwo\u015bci DoMD Sprawd\u017a dokumentacj\u0119 funkcji aby pozna\u0107 wszystkie opcje Do\u0142\u0105cz do spo\u0142eczno\u015bci na GitHub Discussions Gotowe do u\u017cycia! \ud83d\ude80","title":"\ud83c\udfaf Nast\u0119pne kroki"},{"location":"todo/","text":"\ud83e\udd16 TODO - LLM Task List for Command Fixes \u00b6 \ud83d\udccb INSTRUCTIONS FOR LLM: This file contains a list of broken commands that need to be fixed. Each task is a separate command that failed during testing. \ud83c\udfaf YOUR MISSION: 1. Analyze each failed command and its error output 2. Identify the root cause of the failure 3. Implement the fix by modifying source code, config files, or dependencies 4. Test the fix by running the command manually 5. Update progress - when a command starts working, it will be moved to DONE.md automatically \ud83d\udcdd TASK FORMAT: Each task has: - \u274c Command that failed - \ud83d\udcc1 Source file where the command is defined - \ud83d\udd34 Error output with full details - \ud83d\udca1 Suggested actions for fixing \ud83d\udd04 WORKFLOW: 1. Pick a task from the list below 2. Read the error details carefully 3. Implement the fix 4. Run domd to retest all commands 5. Fixed commands will automatically move to DONE.md \ud83d\udcca Current Status: - Failed Commands: 6 - Working Commands: 18 (see DONE.md) - Last Updated: 2025-06-06 16:45:23 \ud83d\udd27 Tasks to Fix (6 commands) \u00b6 Each section below is a separate task. Fix them one by one: [ ] Task 1: NPM script - build \u00b6 \ud83d\udccb Command: npm run build \ud83d\udcc1 Source: package.json \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: 1 \u26a1 Execution Time: 3.45s \ud83d\udd34 Error Output: \u00b6 # Command that failed: npm run build # Error output: npm ERR! missing script: build npm ERR! npm ERR! To see a list of scripts, run: npm ERR! npm run npm ERR! npm ERR! A complete log of this run can be found in : npm ERR! /home/user/.npm/_logs/2025-06-06T16_45_20_123Z-debug.log \ud83d\udca1 Suggested Fix Actions: \u00b6 Run npm install to ensure all dependencies are installed Check package.json for script definition errors Verify Node.js and npm versions are compatible Check package.json for script definition errors Check if referenced files exist in the project Verify file paths in package.json are correct \ud83d\udd0d Investigation Steps: \u00b6 Check source file: Open package.json and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run npm run build in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works \u2705 Completion Criteria: \u00b6 This task is complete when npm run build runs without errors. The command will then automatically appear in DONE.md on the next test run. [ ] Task 2: Make target - build \u00b6 \ud83d\udccb Command: make build \ud83d\udcc1 Source: Makefile \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: 2 \u26a1 Execution Time: 0.12s \ud83d\udd34 Error Output: \u00b6 # Command that failed: make build # Error output: make: *** No rule to make target 'src/main.c' , needed by 'build' . Stop. \ud83d\udca1 Suggested Fix Actions: \u00b6 Check Makefile syntax and dependencies Verify all required tools are installed (gcc, etc.) Check if target dependencies exist Check if referenced files exist in the project Verify file paths in Makefile are correct Create missing files or update paths \ud83d\udd0d Investigation Steps: \u00b6 Check source file: Open Makefile and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run make build in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works \u2705 Completion Criteria: \u00b6 This task is complete when make build runs without errors. The command will then automatically appear in DONE.md on the next test run. [ ] Task 3: Docker build \u00b6 \ud83d\udccb Command: docker build -t my-project . \ud83d\udcc1 Source: Dockerfile \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: 1 \u26a1 Execution Time: 15.67s \ud83d\udd34 Error Output: \u00b6 # Command that failed: docker build -t my-project . # Error output: Sending build context to Docker daemon 2 .048kB Step 1 /3 : FROM python:3.9-slim ---> 2b5a8a4e89cc Step 2 /3 : COPY requirements.txt . COPY failed: file not found in build context or excluded by .dockerignore: stat requirements.txt: file does not exist \ud83d\udca1 Suggested Fix Actions: \u00b6 Check if Docker is running: docker --version Verify Dockerfile syntax Check Docker permissions for current user Check if referenced files exist in the project Verify file paths in Dockerfile are correct Create missing files or update paths \ud83d\udd0d Investigation Steps: \u00b6 Check source file: Open Dockerfile and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run docker build -t my-project . in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works \u2705 Completion Criteria: \u00b6 This task is complete when docker build -t my-project . runs without errors. The command will then automatically appear in DONE.md on the next test run. [ ] Task 4: Poetry script - mypy \u00b6 \ud83d\udccb Command: poetry run mypy \ud83d\udcc1 Source: pyproject.toml \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: 1 \u26a1 Execution Time: 2.89s \ud83d\udd34 Error Output: \u00b6 # Command that failed: poetry run mypy # Error output: /bin/sh: 1 : mypy: not found \ud83d\udca1 Suggested Fix Actions: \u00b6 Run poetry install to install dependencies Check pyproject.toml for script configuration Verify poetry is installed and accessible Install missing tool/command: Look for installation instructions Check if command is in PATH: which mypy Verify spelling of command in pyproject.toml \ud83d\udd0d Investigation Steps: \u00b6 Check source file: Open pyproject.toml and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run poetry run mypy in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works \u2705 Completion Criteria: \u00b6 This task is complete when poetry run mypy runs without errors. The command will then automatically appear in DONE.md on the next test run. [ ] Task 5: Install pip dependencies from requirements.txt \u00b6 \ud83d\udccb Command: pip install -r requirements.txt \ud83d\udcc1 Source: requirements.txt \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: 1 \u26a1 Execution Time: 1.23s \ud83d\udd34 Error Output: \u00b6 # Command that failed: pip install -r requirements.txt # Error output: ERROR: Could not open requirements file: [ Errno 2 ] No such file or directory: 'requirements.txt' \ud83d\udca1 Suggested Fix Actions: \u00b6 Check if referenced files exist in the project Verify file paths in requirements.txt are correct Create missing files or update paths Read the error output carefully for specific clues Check requirements.txt for command definition and syntax Manually run the command to reproduce and debug the issue \ud83d\udd0d Investigation Steps: \u00b6 Check source file: Open requirements.txt and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run pip install -r requirements.txt in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works \u2705 Completion Criteria: \u00b6 This task is complete when pip install -r requirements.txt runs without errors. The command will then automatically appear in DONE.md on the next test run. [ ] Task 6: Make target - publish \u00b6 \ud83d\udccb Command: make publish \ud83d\udcc1 Source: Makefile \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: -1 \u26a1 Execution Time: 60.00s \ud83d\udd34 Error Output: \u00b6 # Command that failed: make publish # Error output: Command timed out after 60 seconds \ud83d\udca1 Suggested Fix Actions: \u00b6 Command took longer than 60s - consider increasing timeout Check if command is hanging or waiting for input Add to .doignore if this is a long-running service command Check Makefile syntax and dependencies Verify all required tools are installed (gcc, etc.) Check if target dependencies exist \ud83d\udd0d Investigation Steps: \u00b6 Check source file: Open Makefile and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run make publish in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works \u2705 Completion Criteria: \u00b6 This task is complete when make publish runs without errors. The command will then automatically appear in DONE.md on the next test run. \ud83d\udd04 After Making Fixes \u00b6 When you've fixed one or more commands: Test your fixes: # Test specific command manually: cd /home/user/my-project [ your-fixed-command ] # Or test all commands: domd Check results: Fixed commands \u2192 will appear in DONE.md Still broken commands \u2192 remain in this TODO.md New failures \u2192 will be added to this TODO.md Iterate: Continue fixing remaining tasks Re-run domd after each fix Monitor progress in both files \ud83d\udcda Common Fix Patterns \u00b6 Missing Dependencies \u00b6 # Python pip install missing-package poetry add missing-package # Node.js npm install missing-package yarn add missing-package # System sudo apt install missing-tool brew install missing-tool Configuration Issues \u00b6 # Check config files for typos # Verify paths and settings # Update outdated configurations Permission Issues \u00b6 chmod +x script-file sudo chown user:group file Version Compatibility \u00b6 # Update to compatible versions # Check tool documentation # Use version-specific commands","title":"\ud83e\udd16 TODO - LLM Task List for Command Fixes"},{"location":"todo/#todo-llm-task-list-for-command-fixes","text":"\ud83d\udccb INSTRUCTIONS FOR LLM: This file contains a list of broken commands that need to be fixed. Each task is a separate command that failed during testing. \ud83c\udfaf YOUR MISSION: 1. Analyze each failed command and its error output 2. Identify the root cause of the failure 3. Implement the fix by modifying source code, config files, or dependencies 4. Test the fix by running the command manually 5. Update progress - when a command starts working, it will be moved to DONE.md automatically \ud83d\udcdd TASK FORMAT: Each task has: - \u274c Command that failed - \ud83d\udcc1 Source file where the command is defined - \ud83d\udd34 Error output with full details - \ud83d\udca1 Suggested actions for fixing \ud83d\udd04 WORKFLOW: 1. Pick a task from the list below 2. Read the error details carefully 3. Implement the fix 4. Run domd to retest all commands 5. Fixed commands will automatically move to DONE.md \ud83d\udcca Current Status: - Failed Commands: 6 - Working Commands: 18 (see DONE.md) - Last Updated: 2025-06-06 16:45:23","title":"\ud83e\udd16 TODO - LLM Task List for Command Fixes"},{"location":"todo/#tasks-to-fix-6-commands","text":"Each section below is a separate task. Fix them one by one:","title":"\ud83d\udd27 Tasks to Fix (6 commands)"},{"location":"todo/#task-1-npm-script-build","text":"\ud83d\udccb Command: npm run build \ud83d\udcc1 Source: package.json \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: 1 \u26a1 Execution Time: 3.45s","title":"[ ] Task 1: NPM script - build"},{"location":"todo/#error-output","text":"# Command that failed: npm run build # Error output: npm ERR! missing script: build npm ERR! npm ERR! To see a list of scripts, run: npm ERR! npm run npm ERR! npm ERR! A complete log of this run can be found in : npm ERR! /home/user/.npm/_logs/2025-06-06T16_45_20_123Z-debug.log","title":"\ud83d\udd34 Error Output:"},{"location":"todo/#suggested-fix-actions","text":"Run npm install to ensure all dependencies are installed Check package.json for script definition errors Verify Node.js and npm versions are compatible Check package.json for script definition errors Check if referenced files exist in the project Verify file paths in package.json are correct","title":"\ud83d\udca1 Suggested Fix Actions:"},{"location":"todo/#investigation-steps","text":"Check source file: Open package.json and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run npm run build in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works","title":"\ud83d\udd0d Investigation Steps:"},{"location":"todo/#completion-criteria","text":"This task is complete when npm run build runs without errors. The command will then automatically appear in DONE.md on the next test run.","title":"\u2705 Completion Criteria:"},{"location":"todo/#task-2-make-target-build","text":"\ud83d\udccb Command: make build \ud83d\udcc1 Source: Makefile \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: 2 \u26a1 Execution Time: 0.12s","title":"[ ] Task 2: Make target - build"},{"location":"todo/#error-output_1","text":"# Command that failed: make build # Error output: make: *** No rule to make target 'src/main.c' , needed by 'build' . Stop.","title":"\ud83d\udd34 Error Output:"},{"location":"todo/#suggested-fix-actions_1","text":"Check Makefile syntax and dependencies Verify all required tools are installed (gcc, etc.) Check if target dependencies exist Check if referenced files exist in the project Verify file paths in Makefile are correct Create missing files or update paths","title":"\ud83d\udca1 Suggested Fix Actions:"},{"location":"todo/#investigation-steps_1","text":"Check source file: Open Makefile and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run make build in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works","title":"\ud83d\udd0d Investigation Steps:"},{"location":"todo/#completion-criteria_1","text":"This task is complete when make build runs without errors. The command will then automatically appear in DONE.md on the next test run.","title":"\u2705 Completion Criteria:"},{"location":"todo/#task-3-docker-build","text":"\ud83d\udccb Command: docker build -t my-project . \ud83d\udcc1 Source: Dockerfile \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: 1 \u26a1 Execution Time: 15.67s","title":"[ ] Task 3: Docker build"},{"location":"todo/#error-output_2","text":"# Command that failed: docker build -t my-project . # Error output: Sending build context to Docker daemon 2 .048kB Step 1 /3 : FROM python:3.9-slim ---> 2b5a8a4e89cc Step 2 /3 : COPY requirements.txt . COPY failed: file not found in build context or excluded by .dockerignore: stat requirements.txt: file does not exist","title":"\ud83d\udd34 Error Output:"},{"location":"todo/#suggested-fix-actions_2","text":"Check if Docker is running: docker --version Verify Dockerfile syntax Check Docker permissions for current user Check if referenced files exist in the project Verify file paths in Dockerfile are correct Create missing files or update paths","title":"\ud83d\udca1 Suggested Fix Actions:"},{"location":"todo/#investigation-steps_2","text":"Check source file: Open Dockerfile and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run docker build -t my-project . in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works","title":"\ud83d\udd0d Investigation Steps:"},{"location":"todo/#completion-criteria_2","text":"This task is complete when docker build -t my-project . runs without errors. The command will then automatically appear in DONE.md on the next test run.","title":"\u2705 Completion Criteria:"},{"location":"todo/#task-4-poetry-script-mypy","text":"\ud83d\udccb Command: poetry run mypy \ud83d\udcc1 Source: pyproject.toml \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: 1 \u26a1 Execution Time: 2.89s","title":"[ ] Task 4: Poetry script - mypy"},{"location":"todo/#error-output_3","text":"# Command that failed: poetry run mypy # Error output: /bin/sh: 1 : mypy: not found","title":"\ud83d\udd34 Error Output:"},{"location":"todo/#suggested-fix-actions_3","text":"Run poetry install to install dependencies Check pyproject.toml for script configuration Verify poetry is installed and accessible Install missing tool/command: Look for installation instructions Check if command is in PATH: which mypy Verify spelling of command in pyproject.toml","title":"\ud83d\udca1 Suggested Fix Actions:"},{"location":"todo/#investigation-steps_3","text":"Check source file: Open pyproject.toml and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run poetry run mypy in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works","title":"\ud83d\udd0d Investigation Steps:"},{"location":"todo/#completion-criteria_3","text":"This task is complete when poetry run mypy runs without errors. The command will then automatically appear in DONE.md on the next test run.","title":"\u2705 Completion Criteria:"},{"location":"todo/#task-5-install-pip-dependencies-from-requirementstxt","text":"\ud83d\udccb Command: pip install -r requirements.txt \ud83d\udcc1 Source: requirements.txt \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: 1 \u26a1 Execution Time: 1.23s","title":"[ ] Task 5: Install pip dependencies from requirements.txt"},{"location":"todo/#error-output_4","text":"# Command that failed: pip install -r requirements.txt # Error output: ERROR: Could not open requirements file: [ Errno 2 ] No such file or directory: 'requirements.txt'","title":"\ud83d\udd34 Error Output:"},{"location":"todo/#suggested-fix-actions_4","text":"Check if referenced files exist in the project Verify file paths in requirements.txt are correct Create missing files or update paths Read the error output carefully for specific clues Check requirements.txt for command definition and syntax Manually run the command to reproduce and debug the issue","title":"\ud83d\udca1 Suggested Fix Actions:"},{"location":"todo/#investigation-steps_4","text":"Check source file: Open requirements.txt and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run pip install -r requirements.txt in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works","title":"\ud83d\udd0d Investigation Steps:"},{"location":"todo/#completion-criteria_4","text":"This task is complete when pip install -r requirements.txt runs without errors. The command will then automatically appear in DONE.md on the next test run.","title":"\u2705 Completion Criteria:"},{"location":"todo/#task-6-make-target-publish","text":"\ud83d\udccb Command: make publish \ud83d\udcc1 Source: Makefile \u23f1\ufe0f Timeout: 60s \ud83d\udd34 Return Code: -1 \u26a1 Execution Time: 60.00s","title":"[ ] Task 6: Make target - publish"},{"location":"todo/#error-output_5","text":"# Command that failed: make publish # Error output: Command timed out after 60 seconds","title":"\ud83d\udd34 Error Output:"},{"location":"todo/#suggested-fix-actions_5","text":"Command took longer than 60s - consider increasing timeout Check if command is hanging or waiting for input Add to .doignore if this is a long-running service command Check Makefile syntax and dependencies Verify all required tools are installed (gcc, etc.) Check if target dependencies exist","title":"\ud83d\udca1 Suggested Fix Actions:"},{"location":"todo/#investigation-steps_5","text":"Check source file: Open Makefile and locate the command definition Analyze error: Read the error output above for clues Check dependencies: Verify all required tools/packages are installed Test manually: Run make publish in terminal to reproduce the issue Implement fix: Based on error analysis, modify files as needed Verify fix: Run the command again to confirm it works","title":"\ud83d\udd0d Investigation Steps:"},{"location":"todo/#completion-criteria_5","text":"This task is complete when make publish runs without errors. The command will then automatically appear in DONE.md on the next test run.","title":"\u2705 Completion Criteria:"},{"location":"todo/#after-making-fixes","text":"When you've fixed one or more commands: Test your fixes: # Test specific command manually: cd /home/user/my-project [ your-fixed-command ] # Or test all commands: domd Check results: Fixed commands \u2192 will appear in DONE.md Still broken commands \u2192 remain in this TODO.md New failures \u2192 will be added to this TODO.md Iterate: Continue fixing remaining tasks Re-run domd after each fix Monitor progress in both files","title":"\ud83d\udd04 After Making Fixes"},{"location":"todo/#common-fix-patterns","text":"","title":"\ud83d\udcda Common Fix Patterns"},{"location":"todo/#missing-dependencies","text":"# Python pip install missing-package poetry add missing-package # Node.js npm install missing-package yarn add missing-package # System sudo apt install missing-tool brew install missing-tool","title":"Missing Dependencies"},{"location":"todo/#configuration-issues","text":"# Check config files for typos # Verify paths and settings # Update outdated configurations","title":"Configuration Issues"},{"location":"todo/#permission-issues","text":"chmod +x script-file sudo chown user:group file","title":"Permission Issues"},{"location":"todo/#version-compatibility","text":"# Update to compatible versions # Check tool documentation # Use version-specific commands","title":"Version Compatibility"},{"location":"usage/","text":"\ud83d\ude80 DoMD User Guide \u00b6 Table of Contents \u00b6 Basic Usage Project Scanning Configuration Advanced Features CI/CD Integration Usage Examples Troubleshooting \ud83c\udfc1 Basic Usage \u00b6 The simplest way to run DoMD in your project: # Navigate to your project directory cd /path/to/your/project # Run domd domd By default, DoMD will: 1. Scan the current directory for configuration files 2. Identify available commands (e.g., from package.json , Makefile , pyproject.toml ) 3. Execute the found commands 4. Generate a report in TODO.md \ud83d\udd0d Project Scanning \u00b6 Supported Configuration Files \u00b6 DoMD automatically detects and analyzes the following file types: JavaScript/TypeScript : package.json (npm, yarn) Python : setup.py , pyproject.toml , requirements.txt Make : Makefile Docker : Dockerfile , docker-compose.yml Ansible : Playbooks, roles, inventory PHP : composer.json Rust : Cargo.toml TOML : General TOML file support YAML : General YAML file support INI : General INI file support Scanning Options \u00b6 # Scan a specific directory domd --path /path/to/project # Exclude specific files/directories domd --exclude \"*.test.js\" --exclude \"node_modules/*\" # Scan only specific files domd --include-only \"Makefile\" --include-only \"package.json\" \u2699\ufe0f Configuration \u00b6 .domdignore File \u00b6 Create a .domdignore file in your project root to exclude specific commands: # Ignore specific commands npm run test:coverage pytest -xvs # Ignore using patterns *coverage* *test* .dodocker File \u00b6 To run commands in a Docker container, create a .dodocker file: image : python:3.9 volumes : - .:/app working_dir : /app environment : - PYTHONPATH=/app \ud83d\ude80 Advanced Features \u00b6 Dry Run Mode \u00b6 # Show what commands would be executed without actually running them domd --dry-run Output Formats \u00b6 # Format JSON domd --format json # Format tekstowy domd --format text # Format Markdown (domy\u015blny) domd --format markdown # W\u0142asna \u015bcie\u017cka wyj\u015bciowa domd --output raport.md Ustawienie limitu czasu \u00b6 # Ustawienie limitu czasu na wykonanie komendy (domy\u015blnie 60s) domd --timeout 120 \ud83e\udd16 Integracja z CI/CD \u00b6 GitHub Actions \u00b6 Przyk\u0142adowy plik workflow dla GitHub Actions: name : DoMD Health Check on : [ push , pull_request ] jobs : health-check : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 - name : Set up Python uses : actions/setup-python@v4 with : python-version : '3.9' - name : Install DoMD run : pip install domd - name : Run health check run : domd --output health-report.md - name : Upload report uses : actions/upload-artifact@v3 with : name : health-report path : health-report.md \ud83d\udca1 Przyk\u0142ady u\u017cycia \u00b6 Przyk\u0142ad 1: Podstawowe u\u017cycie \u00b6 # Przejd\u017a do katalogu projektu cd moj-projekt # Uruchom domd domd # Sprawd\u017a wygenerowany raport cat TODO.md Przyk\u0142ad 2: Integracja z Makefile \u00b6 Dodaj do swojego Makefile : health-check : domd --output HEALTH.md .PHONY : health - check \u2753 Rozwi\u0105zywanie problem\u00f3w \u00b6 B\u0142\u0119dy wykonania komend \u00b6 Je\u015bli napotkasz b\u0142\u0119dy podczas wykonywania komend: Sprawd\u017a, czy wszystkie wymagane narz\u0119dzia s\u0105 zainstalowane Upewnij si\u0119, \u017ce wszystkie zmienne \u015brodowiskowe s\u0105 ustawione poprawnie Spr\u00f3buj uruchomi\u0107 problematyczn\u0105 komend\u0119 r\u0119cznie U\u017cyj flagi --verbose , aby uzyska\u0107 wi\u0119cej informacji Zg\u0142aszanie b\u0142\u0119d\u00f3w \u00b6 Je\u015bli znajdziesz b\u0142\u0105d lub masz sugesti\u0119: Sprawd\u017a, czy problem nie zosta\u0142 ju\u017c zg\u0142oszony w issues Je\u015bli nie, utw\u00f3rz nowe zg\u0142oszenie z: Kr\u00f3tkim opisem problemu Krokami do odtworzenia b\u0142\u0119du Oczekiwanym i faktycznym zachowaniem Wersj\u0105 DoMD ( domd --version ) \u015arodowiskiem (system operacyjny, wersja Pythona itp.) Masz dodatkowe pytania? Sprawd\u017a dokumentacj\u0119 lub zg\u0142o\u015b problem .","title":"\ud83d\ude80 DoMD User Guide"},{"location":"usage/#domd-user-guide","text":"","title":"\ud83d\ude80 DoMD User Guide"},{"location":"usage/#table-of-contents","text":"Basic Usage Project Scanning Configuration Advanced Features CI/CD Integration Usage Examples Troubleshooting","title":"Table of Contents"},{"location":"usage/#basic-usage","text":"The simplest way to run DoMD in your project: # Navigate to your project directory cd /path/to/your/project # Run domd domd By default, DoMD will: 1. Scan the current directory for configuration files 2. Identify available commands (e.g., from package.json , Makefile , pyproject.toml ) 3. Execute the found commands 4. Generate a report in TODO.md","title":"\ud83c\udfc1 Basic Usage"},{"location":"usage/#project-scanning","text":"","title":"\ud83d\udd0d Project Scanning"},{"location":"usage/#supported-configuration-files","text":"DoMD automatically detects and analyzes the following file types: JavaScript/TypeScript : package.json (npm, yarn) Python : setup.py , pyproject.toml , requirements.txt Make : Makefile Docker : Dockerfile , docker-compose.yml Ansible : Playbooks, roles, inventory PHP : composer.json Rust : Cargo.toml TOML : General TOML file support YAML : General YAML file support INI : General INI file support","title":"Supported Configuration Files"},{"location":"usage/#scanning-options","text":"# Scan a specific directory domd --path /path/to/project # Exclude specific files/directories domd --exclude \"*.test.js\" --exclude \"node_modules/*\" # Scan only specific files domd --include-only \"Makefile\" --include-only \"package.json\"","title":"Scanning Options"},{"location":"usage/#configuration","text":"","title":"\u2699\ufe0f Configuration"},{"location":"usage/#domdignore-file","text":"Create a .domdignore file in your project root to exclude specific commands: # Ignore specific commands npm run test:coverage pytest -xvs # Ignore using patterns *coverage* *test*","title":".domdignore File"},{"location":"usage/#dodocker-file","text":"To run commands in a Docker container, create a .dodocker file: image : python:3.9 volumes : - .:/app working_dir : /app environment : - PYTHONPATH=/app","title":".dodocker File"},{"location":"usage/#advanced-features","text":"","title":"\ud83d\ude80 Advanced Features"},{"location":"usage/#dry-run-mode","text":"# Show what commands would be executed without actually running them domd --dry-run","title":"Dry Run Mode"},{"location":"usage/#output-formats","text":"# Format JSON domd --format json # Format tekstowy domd --format text # Format Markdown (domy\u015blny) domd --format markdown # W\u0142asna \u015bcie\u017cka wyj\u015bciowa domd --output raport.md","title":"Output Formats"},{"location":"usage/#ustawienie-limitu-czasu","text":"# Ustawienie limitu czasu na wykonanie komendy (domy\u015blnie 60s) domd --timeout 120","title":"Ustawienie limitu czasu"},{"location":"usage/#integracja-z-cicd","text":"","title":"\ud83e\udd16 Integracja z CI/CD"},{"location":"usage/#github-actions","text":"Przyk\u0142adowy plik workflow dla GitHub Actions: name : DoMD Health Check on : [ push , pull_request ] jobs : health-check : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 - name : Set up Python uses : actions/setup-python@v4 with : python-version : '3.9' - name : Install DoMD run : pip install domd - name : Run health check run : domd --output health-report.md - name : Upload report uses : actions/upload-artifact@v3 with : name : health-report path : health-report.md","title":"GitHub Actions"},{"location":"usage/#przykady-uzycia","text":"","title":"\ud83d\udca1 Przyk\u0142ady u\u017cycia"},{"location":"usage/#przykad-1-podstawowe-uzycie","text":"# Przejd\u017a do katalogu projektu cd moj-projekt # Uruchom domd domd # Sprawd\u017a wygenerowany raport cat TODO.md","title":"Przyk\u0142ad 1: Podstawowe u\u017cycie"},{"location":"usage/#przykad-2-integracja-z-makefile","text":"Dodaj do swojego Makefile : health-check : domd --output HEALTH.md .PHONY : health - check","title":"Przyk\u0142ad 2: Integracja z Makefile"},{"location":"usage/#rozwiazywanie-problemow","text":"","title":"\u2753 Rozwi\u0105zywanie problem\u00f3w"},{"location":"usage/#bedy-wykonania-komend","text":"Je\u015bli napotkasz b\u0142\u0119dy podczas wykonywania komend: Sprawd\u017a, czy wszystkie wymagane narz\u0119dzia s\u0105 zainstalowane Upewnij si\u0119, \u017ce wszystkie zmienne \u015brodowiskowe s\u0105 ustawione poprawnie Spr\u00f3buj uruchomi\u0107 problematyczn\u0105 komend\u0119 r\u0119cznie U\u017cyj flagi --verbose , aby uzyska\u0107 wi\u0119cej informacji","title":"B\u0142\u0119dy wykonania komend"},{"location":"usage/#zgaszanie-bedow","text":"Je\u015bli znajdziesz b\u0142\u0105d lub masz sugesti\u0119: Sprawd\u017a, czy problem nie zosta\u0142 ju\u017c zg\u0142oszony w issues Je\u015bli nie, utw\u00f3rz nowe zg\u0142oszenie z: Kr\u00f3tkim opisem problemu Krokami do odtworzenia b\u0142\u0119du Oczekiwanym i faktycznym zachowaniem Wersj\u0105 DoMD ( domd --version ) \u015arodowiskiem (system operacyjny, wersja Pythona itp.) Masz dodatkowe pytania? Sprawd\u017a dokumentacj\u0119 lub zg\u0142o\u015b problem .","title":"Zg\u0142aszanie b\u0142\u0119d\u00f3w"},{"location":"usage.old/","text":"\ud83c\udf89 domd \u00b6 \u2705 STATUS: WSZYSTKIE PLIKI WYGENEROWANE KOMPLETNIE \u00b6 Bazuj\u0105c na Twoim pliku pyproject.toml , zosta\u0142a stworzona kompletna, profesjonalna paczka Python domd z pe\u0142n\u0105 implementacj\u0105 oryginalnego skryptu oraz zaawansowanymi funkcjami. \ud83d\udce6 Wygenerowane Pliki (21 artefakt\u00f3w) \u00b6 \ud83d\udd27 Konfiguracja Projektu \u00b6 Plik Opis Status pyproject.toml Pe\u0142na konfiguracja Poetry z zale\u017cno\u015bciami \u2705 Kompletny tox.ini Konfiguracja test\u00f3w w r\u00f3\u017cnych \u015brodowiskach \u2705 Kompletny .pre-commit-config.yaml Pre-commit hooks dla jako\u015bci kodu \u2705 Kompletny .gitignore Ignorowane pliki dla Git \u2705 Kompletny LICENSE Licencja Apache 2.0 \u2705 Kompletny \ud83d\udc0d Kod \u0179r\u00f3d\u0142owy \u00b6 Plik Opis Status src/domd/__init__.py Inicjalizacja paczki \u2705 Kompletny src/domd/cli.py Interfejs linii komend \u2705 Kompletny src/domd/detector.py G\u0142\u00f3wna logika detektora (oryginalny skrypt) \u2705 Kompletny \ud83e\uddea Testy \u00b6 Plik Opis Status tests/conftest.py Konfiguracja pytest z fixtures \u2705 Kompletny tests/test_detector.py Testy jednostkowe i integracyjne \u2705 Kompletny \ud83d\udcda Dokumentacja \u00b6 Plik Opis Status README.md G\u0142\u00f3wna dokumentacja projektu \u2705 Kompletny QUICK_START.md Przewodnik szybkiego startu \u2705 Kompletny INSTALLATION.md Szczeg\u00f3\u0142owa instrukcja instalacji \u2705 Kompletny CHANGELOG.md Historia zmian \u2705 Kompletny mkdocs.yml Konfiguracja dokumentacji MkDocs \u2705 Kompletny docs/index.md Strona g\u0142\u00f3wna dokumentacji \u2705 Kompletny \ud83d\ude80 Automatyzacja i CI/CD \u00b6 Plik Opis Status Makefile Komendy automatyzacji (50+ zada\u0144) \u2705 Kompletny .github/workflows/ci.yml GitHub Actions CI/CD pipeline \u2705 Kompletny scripts/setup_project.sh Automatyczna konfiguracja projektu \u2705 Kompletny scripts/check_version.py Sprawdzanie sp\u00f3jno\u015bci wersji \u2705 Kompletny \ud83d\ude80 Funkcjonalno\u015bci Zaimplementowane \u00b6 \ud83d\udd0d Wykrywanie Komend (15+ typ\u00f3w projekt\u00f3w) \u00b6 \u2705 JavaScript/Node.js : package.json, npm/yarn/pnpm \u2705 Python : pyproject.toml, setup.py, tox.ini, pytest, requirements.txt \u2705 Build Systems : Makefile, CMake, Gradle, Maven \u2705 Docker : Dockerfile, docker-compose \u2705 CI/CD : GitHub Actions, GitLab CI, Jenkins \u2705 Inne j\u0119zyki : PHP, Ruby, Rust, Go \ud83e\uddea Testowanie Komend \u00b6 \u2705 Bezpieczne wykonywanie z timeout i error handling \u2705 Szczeg\u00f3\u0142owe przechwytywanie b\u0142\u0119d\u00f3w z kodami powrotu \u2705 Pomiar czasu wykonania dla analizy wydajno\u015bci \u2705 Filtrowanie plik\u00f3w (include/exclude patterns) \ud83d\udcca Generowanie Raport\u00f3w \u00b6 \u2705 TODO.md ze szczeg\u00f3\u0142owymi raportami b\u0142\u0119d\u00f3w \u2705 Sugestie napraw dla cz\u0119stych problem\u00f3w \u2705 Wieloformatowe wyj\u015bcie : Markdown, JSON, Text \u2705 Statystyki i analizy sukcesu \ud83d\udee0\ufe0f CLI Interface \u00b6 \u2705 Dry-run mode - podgl\u0105d bez wykonywania \u2705 Verbose/Quiet modes - kontrola szczeg\u00f3\u0142owo\u015bci \u2705 Konfigurowalny timeout \u2705 Custom output paths \u2705 Pattern filtering \ud83c\udfd7\ufe0f Architektura Projektu \u00b6 domd/ \u251c\u2500\u2500 \ud83d\udccb Konfiguracja \u2502 \u251c\u2500\u2500 pyproject.toml # Poetry config \u2502 \u251c\u2500\u2500 tox.ini # Multi-env testing \u2502 \u251c\u2500\u2500 .pre-commit-config.yaml # Code quality hooks \u2502 \u2514\u2500\u2500 .github/workflows/ # CI/CD pipeline \u251c\u2500\u2500 \ud83d\udc0d Kod \u0179r\u00f3d\u0142owy \u2502 \u2514\u2500\u2500 src/domd/ \u2502 \u251c\u2500\u2500 __init__.py # Package init \u2502 \u251c\u2500\u2500 cli.py # Command line interface \u2502 \u2514\u2500\u2500 detector.py # Main detection logic \u251c\u2500\u2500 \ud83e\uddea Testy \u2502 \u251c\u2500\u2500 conftest.py # Pytest configuration \u2502 \u2514\u2500\u2500 test_detector.py # Comprehensive tests \u251c\u2500\u2500 \ud83d\udcda Dokumentacja \u2502 \u251c\u2500\u2500 README.md # Main documentation \u2502 \u251c\u2500\u2500 QUICK_START.md # Quick start guide \u2502 \u251c\u2500\u2500 INSTALLATION.md # Installation guide \u2502 \u2514\u2500\u2500 docs/ # MkDocs documentation \u2514\u2500\u2500 \ud83d\ude80 Automatyzacja \u251c\u2500\u2500 Makefile # Build automation \u2514\u2500\u2500 scripts/ # Helper scripts \ud83d\ude80 Szybki Start \u00b6 1. Utw\u00f3rz Projekt \u00b6 # Utw\u00f3rz katalog i skopiuj wszystkie pliki mkdir domd && cd domd # Skopiuj wszystkie artefakty (pyproject.toml, src/, tests/, etc.) 2. Automatyczna Konfiguracja \u00b6 # Uruchom automatyczny setup chmod +x scripts/setup_project.sh ./scripts/setup_project.sh 3. Pierwsze U\u017cycie \u00b6 # Podgl\u0105d komend (bezpieczny) poetry run domd --dry-run # Test rzeczywisty poetry run domd --verbose # Dogfooding - domd testuje sam siebie! make health-check \ud83c\udfaf Gotowe Do U\u017cycia \u00b6 \u2705 Podstawowe Komendy \u00b6 make dev # Pe\u0142ne \u015brodowisko deweloperskie make test # Uruchom testy make lint # Sprawd\u017a jako\u015b\u0107 kodu make build # Zbuduj paczk\u0119 make health-check # domd testuje sam siebie \u2705 CI/CD Ready \u00b6 GitHub Actions workflow skonfigurowany Pre-commit hooks zainstalowane Testy w wielu wersjach Python (3.8-3.12) Automatyczne budowanie i publikacja \u2705 Dokumentacja \u00b6 Kompletny README z przyk\u0142adami Przewodnik szybkiego startu Szczeg\u00f3\u0142owa instrukcja instalacji MkDocs dla profesjonalnej dokumentacji \ud83d\udcca Statystyki Projektu \u00b6 Metryka Warto\u015b\u0107 Obs\u0142ugiwane technologie 15+ Wykrywane formaty plik\u00f3w 20+ Rozpoznawane wzorce komend 50+ Formaty wyj\u015bciowe 3 (MD, JSON, Text) Wspierane wersje Python 3.8 - 3.12 Pliki konfiguracyjne 21 Gotowo\u015b\u0107 do produkcji \u2705 100% \ud83d\udd04 Nast\u0119pne Kroki \u00b6 1. Dostosuj Do Swoich Potrzeb \u00b6 Zmie\u0144 wronai na prawdziwy username w URL-ach Zaktualizuj informacje o autorze w pyproject.toml Dostosuj exclude/include patterns do swojego projektu 2. Rozwijaj \u00b6 Dodaj nowe parsery w src/domd/parsers/ Stw\u00f3rz custom reportery w src/domd/reporters/ Dodaj integracje z narz\u0119dziami (Slack, Teams, etc.) 3. Publikuj \u00b6 make release-patch # Publikuj wersj\u0119 patch make release-minor # Publikuj wersj\u0119 minor \ud83c\udfc6 Osi\u0105gni\u0119cia \u00b6 \u2705 Oryginalny skrypt zosta\u0142 przekszta\u0142cony w profesjonaln\u0105 paczk\u0119 Python \u2705 Zachowana funkcjonalno\u015b\u0107 + dodane zaawansowane features \u2705 Kompletna dokumentacja z przyk\u0142adami u\u017cycia \u2705 Testy zapewniaj\u0105ce jako\u015b\u0107 kodu \u2705 CI/CD pipeline dla automatyzacji \u2705 Modu\u0142owa architektura umo\u017cliwiaj\u0105ca \u0142atwe rozszerzanie \u2705 Zgodno\u015b\u0107 z Python 3.8+ i najlepszymi praktykami \ud83c\udf89 Podsumowanie \u00b6 domd jest gotowe do u\u017cycia w produkcji! Projekt zawiera: - Kompletn\u0105 implementacj\u0119 oryginalnego skryptu - Zaawansowane funkcje CLI i API - Profesjonaln\u0105 struktur\u0119 paczki Python - Pe\u0142n\u0105 dokumentacj\u0119 i przyk\u0142ady - Automatyzacj\u0119 budowania i testowania - Integracj\u0119 CI/CD z GitHub Actions","title":"\ud83c\udf89 domd"},{"location":"usage.old/#domd","text":"","title":"\ud83c\udf89 domd"},{"location":"usage.old/#status-wszystkie-pliki-wygenerowane-kompletnie","text":"Bazuj\u0105c na Twoim pliku pyproject.toml , zosta\u0142a stworzona kompletna, profesjonalna paczka Python domd z pe\u0142n\u0105 implementacj\u0105 oryginalnego skryptu oraz zaawansowanymi funkcjami.","title":"\u2705 STATUS: WSZYSTKIE PLIKI WYGENEROWANE KOMPLETNIE"},{"location":"usage.old/#wygenerowane-pliki-21-artefaktow","text":"","title":"\ud83d\udce6 Wygenerowane Pliki (21 artefakt\u00f3w)"},{"location":"usage.old/#konfiguracja-projektu","text":"Plik Opis Status pyproject.toml Pe\u0142na konfiguracja Poetry z zale\u017cno\u015bciami \u2705 Kompletny tox.ini Konfiguracja test\u00f3w w r\u00f3\u017cnych \u015brodowiskach \u2705 Kompletny .pre-commit-config.yaml Pre-commit hooks dla jako\u015bci kodu \u2705 Kompletny .gitignore Ignorowane pliki dla Git \u2705 Kompletny LICENSE Licencja Apache 2.0 \u2705 Kompletny","title":"\ud83d\udd27 Konfiguracja Projektu"},{"location":"usage.old/#kod-zrodowy","text":"Plik Opis Status src/domd/__init__.py Inicjalizacja paczki \u2705 Kompletny src/domd/cli.py Interfejs linii komend \u2705 Kompletny src/domd/detector.py G\u0142\u00f3wna logika detektora (oryginalny skrypt) \u2705 Kompletny","title":"\ud83d\udc0d Kod \u0179r\u00f3d\u0142owy"},{"location":"usage.old/#testy","text":"Plik Opis Status tests/conftest.py Konfiguracja pytest z fixtures \u2705 Kompletny tests/test_detector.py Testy jednostkowe i integracyjne \u2705 Kompletny","title":"\ud83e\uddea Testy"},{"location":"usage.old/#dokumentacja","text":"Plik Opis Status README.md G\u0142\u00f3wna dokumentacja projektu \u2705 Kompletny QUICK_START.md Przewodnik szybkiego startu \u2705 Kompletny INSTALLATION.md Szczeg\u00f3\u0142owa instrukcja instalacji \u2705 Kompletny CHANGELOG.md Historia zmian \u2705 Kompletny mkdocs.yml Konfiguracja dokumentacji MkDocs \u2705 Kompletny docs/index.md Strona g\u0142\u00f3wna dokumentacji \u2705 Kompletny","title":"\ud83d\udcda Dokumentacja"},{"location":"usage.old/#automatyzacja-i-cicd","text":"Plik Opis Status Makefile Komendy automatyzacji (50+ zada\u0144) \u2705 Kompletny .github/workflows/ci.yml GitHub Actions CI/CD pipeline \u2705 Kompletny scripts/setup_project.sh Automatyczna konfiguracja projektu \u2705 Kompletny scripts/check_version.py Sprawdzanie sp\u00f3jno\u015bci wersji \u2705 Kompletny","title":"\ud83d\ude80 Automatyzacja i CI/CD"},{"location":"usage.old/#funkcjonalnosci-zaimplementowane","text":"","title":"\ud83d\ude80 Funkcjonalno\u015bci Zaimplementowane"},{"location":"usage.old/#wykrywanie-komend-15-typow-projektow","text":"\u2705 JavaScript/Node.js : package.json, npm/yarn/pnpm \u2705 Python : pyproject.toml, setup.py, tox.ini, pytest, requirements.txt \u2705 Build Systems : Makefile, CMake, Gradle, Maven \u2705 Docker : Dockerfile, docker-compose \u2705 CI/CD : GitHub Actions, GitLab CI, Jenkins \u2705 Inne j\u0119zyki : PHP, Ruby, Rust, Go","title":"\ud83d\udd0d Wykrywanie Komend (15+ typ\u00f3w projekt\u00f3w)"},{"location":"usage.old/#testowanie-komend","text":"\u2705 Bezpieczne wykonywanie z timeout i error handling \u2705 Szczeg\u00f3\u0142owe przechwytywanie b\u0142\u0119d\u00f3w z kodami powrotu \u2705 Pomiar czasu wykonania dla analizy wydajno\u015bci \u2705 Filtrowanie plik\u00f3w (include/exclude patterns)","title":"\ud83e\uddea Testowanie Komend"},{"location":"usage.old/#generowanie-raportow","text":"\u2705 TODO.md ze szczeg\u00f3\u0142owymi raportami b\u0142\u0119d\u00f3w \u2705 Sugestie napraw dla cz\u0119stych problem\u00f3w \u2705 Wieloformatowe wyj\u015bcie : Markdown, JSON, Text \u2705 Statystyki i analizy sukcesu","title":"\ud83d\udcca Generowanie Raport\u00f3w"},{"location":"usage.old/#cli-interface","text":"\u2705 Dry-run mode - podgl\u0105d bez wykonywania \u2705 Verbose/Quiet modes - kontrola szczeg\u00f3\u0142owo\u015bci \u2705 Konfigurowalny timeout \u2705 Custom output paths \u2705 Pattern filtering","title":"\ud83d\udee0\ufe0f CLI Interface"},{"location":"usage.old/#architektura-projektu","text":"domd/ \u251c\u2500\u2500 \ud83d\udccb Konfiguracja \u2502 \u251c\u2500\u2500 pyproject.toml # Poetry config \u2502 \u251c\u2500\u2500 tox.ini # Multi-env testing \u2502 \u251c\u2500\u2500 .pre-commit-config.yaml # Code quality hooks \u2502 \u2514\u2500\u2500 .github/workflows/ # CI/CD pipeline \u251c\u2500\u2500 \ud83d\udc0d Kod \u0179r\u00f3d\u0142owy \u2502 \u2514\u2500\u2500 src/domd/ \u2502 \u251c\u2500\u2500 __init__.py # Package init \u2502 \u251c\u2500\u2500 cli.py # Command line interface \u2502 \u2514\u2500\u2500 detector.py # Main detection logic \u251c\u2500\u2500 \ud83e\uddea Testy \u2502 \u251c\u2500\u2500 conftest.py # Pytest configuration \u2502 \u2514\u2500\u2500 test_detector.py # Comprehensive tests \u251c\u2500\u2500 \ud83d\udcda Dokumentacja \u2502 \u251c\u2500\u2500 README.md # Main documentation \u2502 \u251c\u2500\u2500 QUICK_START.md # Quick start guide \u2502 \u251c\u2500\u2500 INSTALLATION.md # Installation guide \u2502 \u2514\u2500\u2500 docs/ # MkDocs documentation \u2514\u2500\u2500 \ud83d\ude80 Automatyzacja \u251c\u2500\u2500 Makefile # Build automation \u2514\u2500\u2500 scripts/ # Helper scripts","title":"\ud83c\udfd7\ufe0f Architektura Projektu"},{"location":"usage.old/#szybki-start","text":"","title":"\ud83d\ude80 Szybki Start"},{"location":"usage.old/#1-utworz-projekt","text":"# Utw\u00f3rz katalog i skopiuj wszystkie pliki mkdir domd && cd domd # Skopiuj wszystkie artefakty (pyproject.toml, src/, tests/, etc.)","title":"1. Utw\u00f3rz Projekt"},{"location":"usage.old/#2-automatyczna-konfiguracja","text":"# Uruchom automatyczny setup chmod +x scripts/setup_project.sh ./scripts/setup_project.sh","title":"2. Automatyczna Konfiguracja"},{"location":"usage.old/#3-pierwsze-uzycie","text":"# Podgl\u0105d komend (bezpieczny) poetry run domd --dry-run # Test rzeczywisty poetry run domd --verbose # Dogfooding - domd testuje sam siebie! make health-check","title":"3. Pierwsze U\u017cycie"},{"location":"usage.old/#gotowe-do-uzycia","text":"","title":"\ud83c\udfaf Gotowe Do U\u017cycia"},{"location":"usage.old/#podstawowe-komendy","text":"make dev # Pe\u0142ne \u015brodowisko deweloperskie make test # Uruchom testy make lint # Sprawd\u017a jako\u015b\u0107 kodu make build # Zbuduj paczk\u0119 make health-check # domd testuje sam siebie","title":"\u2705 Podstawowe Komendy"},{"location":"usage.old/#cicd-ready","text":"GitHub Actions workflow skonfigurowany Pre-commit hooks zainstalowane Testy w wielu wersjach Python (3.8-3.12) Automatyczne budowanie i publikacja","title":"\u2705 CI/CD Ready"},{"location":"usage.old/#dokumentacja_1","text":"Kompletny README z przyk\u0142adami Przewodnik szybkiego startu Szczeg\u00f3\u0142owa instrukcja instalacji MkDocs dla profesjonalnej dokumentacji","title":"\u2705 Dokumentacja"},{"location":"usage.old/#statystyki-projektu","text":"Metryka Warto\u015b\u0107 Obs\u0142ugiwane technologie 15+ Wykrywane formaty plik\u00f3w 20+ Rozpoznawane wzorce komend 50+ Formaty wyj\u015bciowe 3 (MD, JSON, Text) Wspierane wersje Python 3.8 - 3.12 Pliki konfiguracyjne 21 Gotowo\u015b\u0107 do produkcji \u2705 100%","title":"\ud83d\udcca Statystyki Projektu"},{"location":"usage.old/#nastepne-kroki","text":"","title":"\ud83d\udd04 Nast\u0119pne Kroki"},{"location":"usage.old/#1-dostosuj-do-swoich-potrzeb","text":"Zmie\u0144 wronai na prawdziwy username w URL-ach Zaktualizuj informacje o autorze w pyproject.toml Dostosuj exclude/include patterns do swojego projektu","title":"1. Dostosuj Do Swoich Potrzeb"},{"location":"usage.old/#2-rozwijaj","text":"Dodaj nowe parsery w src/domd/parsers/ Stw\u00f3rz custom reportery w src/domd/reporters/ Dodaj integracje z narz\u0119dziami (Slack, Teams, etc.)","title":"2. Rozwijaj"},{"location":"usage.old/#3-publikuj","text":"make release-patch # Publikuj wersj\u0119 patch make release-minor # Publikuj wersj\u0119 minor","title":"3. Publikuj"},{"location":"usage.old/#osiagniecia","text":"\u2705 Oryginalny skrypt zosta\u0142 przekszta\u0142cony w profesjonaln\u0105 paczk\u0119 Python \u2705 Zachowana funkcjonalno\u015b\u0107 + dodane zaawansowane features \u2705 Kompletna dokumentacja z przyk\u0142adami u\u017cycia \u2705 Testy zapewniaj\u0105ce jako\u015b\u0107 kodu \u2705 CI/CD pipeline dla automatyzacji \u2705 Modu\u0142owa architektura umo\u017cliwiaj\u0105ca \u0142atwe rozszerzanie \u2705 Zgodno\u015b\u0107 z Python 3.8+ i najlepszymi praktykami","title":"\ud83c\udfc6 Osi\u0105gni\u0119cia"},{"location":"usage.old/#podsumowanie","text":"domd jest gotowe do u\u017cycia w produkcji! Projekt zawiera: - Kompletn\u0105 implementacj\u0119 oryginalnego skryptu - Zaawansowane funkcje CLI i API - Profesjonaln\u0105 struktur\u0119 paczki Python - Pe\u0142n\u0105 dokumentacj\u0119 i przyk\u0142ady - Automatyzacj\u0119 budowania i testowania - Integracj\u0119 CI/CD z GitHub Actions","title":"\ud83c\udf89 Podsumowanie"},{"location":"development/ansible-tests/","text":"Ansible Test Suite \u00b6 This document provides detailed information about the Ansible test suite in DoMD, including how to write and run tests for Ansible-related functionality. Test Structure \u00b6 The Ansible tests are organized into several modules, each focusing on different aspects of Ansible functionality: test_ansible_playbook.py : Tests for Ansible playbook detection and execution test_ansible_roles.py : Tests for Ansible role structure and functionality test_ansible_galaxy.py : Tests for Ansible Galaxy integration test_ansible_vault.py : Tests for Ansible Vault functionality test_ansible_inventory.py : Tests for Ansible inventory handling Writing Tests \u00b6 Test Fixtures \u00b6 Use the following fixtures for Ansible testing: ansible_playbook : Creates a sample Ansible playbook with inventory ansible_role : Sets up a basic Ansible role structure ansible_requirements : Creates a sample requirements.yml file Example Test \u00b6 def test_playbook_execution ( ansible_playbook ): \"\"\"Test execution of an Ansible playbook.\"\"\" detector = ProjectCommandDetector ( str ( ansible_playbook . parent )) commands = detector . scan_project () # Verify playbook was detected playbook_cmds = [ c for c in commands if c . get ( 'type' ) == 'ansible_playbook' ] assert len ( playbook_cmds ) > 0 Running Tests \u00b6 Run All Ansible Tests \u00b6 make test-ansible Run Specific Test Modules \u00b6 # Test playbooks make test-playbooks # Test roles make test-roles # Test Galaxy integration make test-galaxy # Test Vault functionality make test-vault # Test inventory handling make test-inventory Run with Coverage \u00b6 pytest --cov = domd tests/test_ansible_*.py Test Dependencies \u00b6 Ansible tests require: - ansible-core >= 2.12.0 - ansible-lint >= 6.0.0 - molecule >= 4.0.0 (for integration tests) Debugging Tests \u00b6 To debug test failures: Run tests with -v for verbose output: pytest tests/test_ansible_playbook.py -v Use pdb for interactive debugging: pytest tests/test_ansible_playbook.py -v --pdb Check the test log in test-results/ansible-tests.log Best Practices \u00b6 Isolate Tests : Each test should be independent Use Mocks : Mock external calls for unit tests Test Edge Cases : Include tests for error conditions Keep Tests Fast : Use appropriate test scopes Document Tests : Include clear docstrings and comments","title":"Ansible Tests"},{"location":"development/ansible-tests/#ansible-test-suite","text":"This document provides detailed information about the Ansible test suite in DoMD, including how to write and run tests for Ansible-related functionality.","title":"Ansible Test Suite"},{"location":"development/ansible-tests/#test-structure","text":"The Ansible tests are organized into several modules, each focusing on different aspects of Ansible functionality: test_ansible_playbook.py : Tests for Ansible playbook detection and execution test_ansible_roles.py : Tests for Ansible role structure and functionality test_ansible_galaxy.py : Tests for Ansible Galaxy integration test_ansible_vault.py : Tests for Ansible Vault functionality test_ansible_inventory.py : Tests for Ansible inventory handling","title":"Test Structure"},{"location":"development/ansible-tests/#writing-tests","text":"","title":"Writing Tests"},{"location":"development/ansible-tests/#test-fixtures","text":"Use the following fixtures for Ansible testing: ansible_playbook : Creates a sample Ansible playbook with inventory ansible_role : Sets up a basic Ansible role structure ansible_requirements : Creates a sample requirements.yml file","title":"Test Fixtures"},{"location":"development/ansible-tests/#example-test","text":"def test_playbook_execution ( ansible_playbook ): \"\"\"Test execution of an Ansible playbook.\"\"\" detector = ProjectCommandDetector ( str ( ansible_playbook . parent )) commands = detector . scan_project () # Verify playbook was detected playbook_cmds = [ c for c in commands if c . get ( 'type' ) == 'ansible_playbook' ] assert len ( playbook_cmds ) > 0","title":"Example Test"},{"location":"development/ansible-tests/#running-tests","text":"","title":"Running Tests"},{"location":"development/ansible-tests/#run-all-ansible-tests","text":"make test-ansible","title":"Run All Ansible Tests"},{"location":"development/ansible-tests/#run-specific-test-modules","text":"# Test playbooks make test-playbooks # Test roles make test-roles # Test Galaxy integration make test-galaxy # Test Vault functionality make test-vault # Test inventory handling make test-inventory","title":"Run Specific Test Modules"},{"location":"development/ansible-tests/#run-with-coverage","text":"pytest --cov = domd tests/test_ansible_*.py","title":"Run with Coverage"},{"location":"development/ansible-tests/#test-dependencies","text":"Ansible tests require: - ansible-core >= 2.12.0 - ansible-lint >= 6.0.0 - molecule >= 4.0.0 (for integration tests)","title":"Test Dependencies"},{"location":"development/ansible-tests/#debugging-tests","text":"To debug test failures: Run tests with -v for verbose output: pytest tests/test_ansible_playbook.py -v Use pdb for interactive debugging: pytest tests/test_ansible_playbook.py -v --pdb Check the test log in test-results/ansible-tests.log","title":"Debugging Tests"},{"location":"development/ansible-tests/#best-practices","text":"Isolate Tests : Each test should be independent Use Mocks : Mock external calls for unit tests Test Edge Cases : Include tests for error conditions Keep Tests Fast : Use appropriate test scopes Document Tests : Include clear docstrings and comments","title":"Best Practices"},{"location":"development/testing/","text":"Testing DoMD \u00b6 This document provides information about running and writing tests for the DoMD project. Running Tests \u00b6 Run All Tests \u00b6 make test Run Specific Test Types \u00b6 # Unit tests only make test-unit # Integration tests make test-integration # Ansible tests make test-ansible # With coverage report make test-cov Run with Tox \u00b6 # Run all environments tox # Run specific environment tox -e py310 Writing Tests \u00b6 Test Organization \u00b6 Tests are organized by functionality: tests/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 conftest.py \u251c\u2500\u2500 fixtures/ \u251c\u2500\u2500 test_detector.py \u251c\u2500\u2500 test_cli.py \u2514\u2500\u2500 test_ansible_*.py # Ansible test modules Test Guidelines \u00b6 Unit Tests : Test individual functions and classes in isolation Integration Tests : Test interactions between components Ansible Tests : Test Ansible-specific functionality Fixtures : Use fixtures for common test data Mocks : Use mocks for external dependencies Example Test \u00b6 def test_example (): \"\"\"Test example with assertions.\"\"\" result = 1 + 1 assert result == 2 , \"1 + 1 should equal 2\" Continuous Integration \u00b6 Tests are automatically run on: - Push to any branch - Pull requests - Tags Test Coverage \u00b6 To generate a coverage report: make test-cov This will generate an HTML report in htmlcov/ . Debugging Tests \u00b6 To debug test failures: Run with -v for verbose output Use --pdb to drop into debugger on failure Check test logs in test-results/ Best Practices \u00b6 Keep tests focused and fast Use descriptive test names Test edge cases and error conditions Keep test data minimal and focused Update tests when changing functionality","title":"Testing"},{"location":"development/testing/#testing-domd","text":"This document provides information about running and writing tests for the DoMD project.","title":"Testing DoMD"},{"location":"development/testing/#running-tests","text":"","title":"Running Tests"},{"location":"development/testing/#run-all-tests","text":"make test","title":"Run All Tests"},{"location":"development/testing/#run-specific-test-types","text":"# Unit tests only make test-unit # Integration tests make test-integration # Ansible tests make test-ansible # With coverage report make test-cov","title":"Run Specific Test Types"},{"location":"development/testing/#run-with-tox","text":"# Run all environments tox # Run specific environment tox -e py310","title":"Run with Tox"},{"location":"development/testing/#writing-tests","text":"","title":"Writing Tests"},{"location":"development/testing/#test-organization","text":"Tests are organized by functionality: tests/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 conftest.py \u251c\u2500\u2500 fixtures/ \u251c\u2500\u2500 test_detector.py \u251c\u2500\u2500 test_cli.py \u2514\u2500\u2500 test_ansible_*.py # Ansible test modules","title":"Test Organization"},{"location":"development/testing/#test-guidelines","text":"Unit Tests : Test individual functions and classes in isolation Integration Tests : Test interactions between components Ansible Tests : Test Ansible-specific functionality Fixtures : Use fixtures for common test data Mocks : Use mocks for external dependencies","title":"Test Guidelines"},{"location":"development/testing/#example-test","text":"def test_example (): \"\"\"Test example with assertions.\"\"\" result = 1 + 1 assert result == 2 , \"1 + 1 should equal 2\"","title":"Example Test"},{"location":"development/testing/#continuous-integration","text":"Tests are automatically run on: - Push to any branch - Pull requests - Tags","title":"Continuous Integration"},{"location":"development/testing/#test-coverage","text":"To generate a coverage report: make test-cov This will generate an HTML report in htmlcov/ .","title":"Test Coverage"},{"location":"development/testing/#debugging-tests","text":"To debug test failures: Run with -v for verbose output Use --pdb to drop into debugger on failure Check test logs in test-results/","title":"Debugging Tests"},{"location":"development/testing/#best-practices","text":"Keep tests focused and fast Use descriptive test names Test edge cases and error conditions Keep test data minimal and focused Update tests when changing functionality","title":"Best Practices"},{"location":"features/ansible/","text":"Ansible Integration \u00b6 DoMD provides comprehensive support for testing and validating Ansible projects. This includes detection and testing of playbooks, roles, inventories, and other Ansible components. Supported Ansible Features \u00b6 Playbooks \u00b6 Detection of *.yml and *.yaml playbook files Support for playbooks with multiple plays and complex structures Variable file detection and validation Playbook execution with proper environment handling Roles \u00b6 Automatic role structure detection Role metadata parsing from meta/main.yml Role dependency resolution and validation Task and handler file processing Default and custom role variables support Inventories \u00b6 Static inventory file parsing (INI and YAML formats) Dynamic inventory script execution and parsing Group and host variable resolution Support for inventory directories with host_vars and group_vars Ansible Vault \u00b6 Detection of vault-encrypted files Integration with vault password files Support for ansible-vault commands (encrypt, decrypt, view, etc.) Secure handling of sensitive data during testing Ansible Galaxy \u00b6 requirements.yml file parsing Role and collection dependency management Support for multiple Galaxy servers Version constraint handling Recent Improvements \u00b6 Enhanced Testing Framework \u00b6 Added comprehensive test coverage for all Ansible components Implemented mock-based testing for external dependencies Added fixtures for common Ansible project structures Improved error handling and reporting Command Detection \u00b6 More accurate detection of Ansible commands in project files Better handling of command arguments and options Support for custom Ansible configuration files Improved detection of playbook and role structures Performance Optimizations \u00b6 Caching of parsed Ansible content Parallel execution of independent tests Reduced overhead in command detection Memory usage optimizations for large projects Example Commands \u00b6 # Run all Ansible tests make test-ansible # Test playbooks specifically make test-playbooks # Test role functionality make test-roles # Test Galaxy integration make test-galaxy # Test Vault functionality make test-vault # Test inventory handling make test-inventory Configuration \u00b6 Ansible testing can be configured using the following environment variables: ANSIBLE_CONFIG : Path to ansible.cfg (default: ./ansible.cfg ) ANSIBLE_INVENTORY : Path to inventory file (default: inventory/ ) ANSIBLE_VAULT_PASSWORD_FILE : Path to vault password file Best Practices \u00b6 Organize your tests : Keep your test files organized by functionality Use fixtures : Leverage the provided test fixtures for common Ansible structures Mock external calls : Use mocking for external dependencies in unit tests Test different scenarios : Include tests for error cases and edge conditions Keep tests fast : Use appropriate test scopes and mocks to keep tests fast","title":"Ansible Integration"},{"location":"features/ansible/#ansible-integration","text":"DoMD provides comprehensive support for testing and validating Ansible projects. This includes detection and testing of playbooks, roles, inventories, and other Ansible components.","title":"Ansible Integration"},{"location":"features/ansible/#supported-ansible-features","text":"","title":"Supported Ansible Features"},{"location":"features/ansible/#playbooks","text":"Detection of *.yml and *.yaml playbook files Support for playbooks with multiple plays and complex structures Variable file detection and validation Playbook execution with proper environment handling","title":"Playbooks"},{"location":"features/ansible/#roles","text":"Automatic role structure detection Role metadata parsing from meta/main.yml Role dependency resolution and validation Task and handler file processing Default and custom role variables support","title":"Roles"},{"location":"features/ansible/#inventories","text":"Static inventory file parsing (INI and YAML formats) Dynamic inventory script execution and parsing Group and host variable resolution Support for inventory directories with host_vars and group_vars","title":"Inventories"},{"location":"features/ansible/#ansible-vault","text":"Detection of vault-encrypted files Integration with vault password files Support for ansible-vault commands (encrypt, decrypt, view, etc.) Secure handling of sensitive data during testing","title":"Ansible Vault"},{"location":"features/ansible/#ansible-galaxy","text":"requirements.yml file parsing Role and collection dependency management Support for multiple Galaxy servers Version constraint handling","title":"Ansible Galaxy"},{"location":"features/ansible/#recent-improvements","text":"","title":"Recent Improvements"},{"location":"features/ansible/#enhanced-testing-framework","text":"Added comprehensive test coverage for all Ansible components Implemented mock-based testing for external dependencies Added fixtures for common Ansible project structures Improved error handling and reporting","title":"Enhanced Testing Framework"},{"location":"features/ansible/#command-detection","text":"More accurate detection of Ansible commands in project files Better handling of command arguments and options Support for custom Ansible configuration files Improved detection of playbook and role structures","title":"Command Detection"},{"location":"features/ansible/#performance-optimizations","text":"Caching of parsed Ansible content Parallel execution of independent tests Reduced overhead in command detection Memory usage optimizations for large projects","title":"Performance Optimizations"},{"location":"features/ansible/#example-commands","text":"# Run all Ansible tests make test-ansible # Test playbooks specifically make test-playbooks # Test role functionality make test-roles # Test Galaxy integration make test-galaxy # Test Vault functionality make test-vault # Test inventory handling make test-inventory","title":"Example Commands"},{"location":"features/ansible/#configuration","text":"Ansible testing can be configured using the following environment variables: ANSIBLE_CONFIG : Path to ansible.cfg (default: ./ansible.cfg ) ANSIBLE_INVENTORY : Path to inventory file (default: inventory/ ) ANSIBLE_VAULT_PASSWORD_FILE : Path to vault password file","title":"Configuration"},{"location":"features/ansible/#best-practices","text":"Organize your tests : Keep your test files organized by functionality Use fixtures : Leverage the provided test fixtures for common Ansible structures Mock external calls : Use mocking for external dependencies in unit tests Test different scenarios : Include tests for error cases and edge conditions Keep tests fast : Use appropriate test scopes and mocks to keep tests fast","title":"Best Practices"},{"location":"features/core/","text":"Core Features \u00b6 DoMD provides a comprehensive set of features for detecting and managing project commands across various technologies. Supported Technologies \u00b6 Build Systems \u00b6 Make NPM/Yarn Python (setup.py, pyproject.toml, requirements.txt) Composer (PHP) Cargo (Rust) Containerization \u00b6 Docker Docker Compose Configuration Management \u00b6 Ansible (Playbooks, Roles, Inventories, Vault) Terraform (coming soon) Other \u00b6 Shell scripts Generic YAML/JSON/TOML/INI files Key Features \u00b6 Command Detection \u00b6 Automatic detection of executable commands in project files Support for multiple command formats and patterns Custom command pattern matching Command Execution \u00b6 Configurable timeouts Environment variable support Working directory handling Output capture and processing Error Handling \u00b6 Detailed error reporting Stack traces for debugging Suggestions for common issues Output Formats \u00b6 Markdown (default) JSON Plain text Custom templates Integration \u00b6 CI/CD pipeline ready Docker support Plugin system for extensibility Ansible Integration \u00b6 DoMD provides first-class support for Ansible projects, including: Playbook detection and validation Role structure analysis Inventory parsing Vault integration Galaxy requirements management See the Ansible Integration documentation for more details. Configuration \u00b6 DoMD can be configured using: Command-line arguments Configuration files ( .domdrc , pyproject.toml ) Environment variables Example configuration in pyproject.toml : [tool.domd] timeout = 30 output = \"markdown\" verbose = true [tool.domd.ignore] patterns = [ \"*test*\" , \"*dev*\" ] [tool.domd.ansible] inventory = \"inventory/production\" vault_password_file = \".vault_pass.txt\" Best Practices \u00b6 Keep commands simple : Each command should do one thing well Use meaningful names : Make command purposes clear Document requirements : Note any dependencies or prerequisites Test commands : Verify commands work as expected Handle errors : Provide helpful error messages Use configuration : Leverage config files for project-specific settings","title":"Core Features"},{"location":"features/core/#core-features","text":"DoMD provides a comprehensive set of features for detecting and managing project commands across various technologies.","title":"Core Features"},{"location":"features/core/#supported-technologies","text":"","title":"Supported Technologies"},{"location":"features/core/#build-systems","text":"Make NPM/Yarn Python (setup.py, pyproject.toml, requirements.txt) Composer (PHP) Cargo (Rust)","title":"Build Systems"},{"location":"features/core/#containerization","text":"Docker Docker Compose","title":"Containerization"},{"location":"features/core/#configuration-management","text":"Ansible (Playbooks, Roles, Inventories, Vault) Terraform (coming soon)","title":"Configuration Management"},{"location":"features/core/#other","text":"Shell scripts Generic YAML/JSON/TOML/INI files","title":"Other"},{"location":"features/core/#key-features","text":"","title":"Key Features"},{"location":"features/core/#command-detection","text":"Automatic detection of executable commands in project files Support for multiple command formats and patterns Custom command pattern matching","title":"Command Detection"},{"location":"features/core/#command-execution","text":"Configurable timeouts Environment variable support Working directory handling Output capture and processing","title":"Command Execution"},{"location":"features/core/#error-handling","text":"Detailed error reporting Stack traces for debugging Suggestions for common issues","title":"Error Handling"},{"location":"features/core/#output-formats","text":"Markdown (default) JSON Plain text Custom templates","title":"Output Formats"},{"location":"features/core/#integration","text":"CI/CD pipeline ready Docker support Plugin system for extensibility","title":"Integration"},{"location":"features/core/#ansible-integration","text":"DoMD provides first-class support for Ansible projects, including: Playbook detection and validation Role structure analysis Inventory parsing Vault integration Galaxy requirements management See the Ansible Integration documentation for more details.","title":"Ansible Integration"},{"location":"features/core/#configuration","text":"DoMD can be configured using: Command-line arguments Configuration files ( .domdrc , pyproject.toml ) Environment variables Example configuration in pyproject.toml : [tool.domd] timeout = 30 output = \"markdown\" verbose = true [tool.domd.ignore] patterns = [ \"*test*\" , \"*dev*\" ] [tool.domd.ansible] inventory = \"inventory/production\" vault_password_file = \".vault_pass.txt\"","title":"Configuration"},{"location":"features/core/#best-practices","text":"Keep commands simple : Each command should do one thing well Use meaningful names : Make command purposes clear Document requirements : Note any dependencies or prerequisites Test commands : Verify commands work as expected Handle errors : Provide helpful error messages Use configuration : Leverage config files for project-specific settings","title":"Best Practices"}]}