# DoMD - Lista zadań refaktoryzacyjnych

## Naprawy pilne (krótkoterminowe)
1. [x] Naprawić błąd raportowania wykonanych komend w CLI
   - [x] Poprawić funkcję print_summary w cli.py, aby używała rzeczywistej liczby przetestowanych komend
   - [x] Zaktualizować typy w CommandHandler, aby odzwierciedlały mieszane typy (Command i Dict)

## Refaktoryzacja architektury (średnioterminowa)
1. [x] Wprowadzić czystą architekturę warstwową
   - [x] Stworzyć katalog core/domain z modelami domenowymi
   - [x] Zdefiniować jasne modele Command i CommandResult
   - [x] Oddzielić wynik wykonania komendy od samej komendy

2. [x] Wprowadzić wzorzec portów i adapterów
   - [x] Zdefiniować interfejsy dla repozytoriów komend
   - [x] Zdefiniować interfejsy dla wykonawców komend
   - [x] Zdefiniować interfejsy dla formaterów raportów

3. [x] Zaimplementować usługi biznesowe
   - [x] CommandService do zarządzania wykonaniem komend
   - [x] ReportService do generowania raportów
   - [ ] ProjectService do zarządzania projektem

4. [x] Zaimplementować adaptery
   - [x] CLI adapter (CommandPresenter)
   - [x] Adapter formatera Markdown
   - [x] Adapter repozytorium w pamięci

5. [x] Wprowadzić wzorzec fabryki
   - [x] ApplicationFactory do tworzenia i łączenia komponentów

## Rozszerzenia (długoterminowe)
1. [ ] Dodać REST API
   - [ ] Zaimplementować adapter REST
   - [ ] Dodać dokumentację API (Swagger/OpenAPI)

2. [ ] Dodać interfejs webowy
   - [ ] Zaimplementować prosty interfejs webowy do zarządzania komendami

3. [ ] Dodać integrację z systemami CI/CD
   - [ ] Dodać adapter dla GitLab CI
   - [ ] Dodać adapter dla GitHub Actions

4. [ ] Dodać system wtyczek
   - [ ] Zdefiniować interfejs wtyczek
   - [ ] Dodać mechanizm ładowania wtyczek

## Testy
1. [ ] Dodać testy jednostkowe dla każdej warstwy
   - [ ] Testy modeli domenowych
   - [ ] Testy usług biznesowych
   - [ ] Testy adapterów

2. [ ] Dodać testy integracyjne
   - [ ] Testy przepływu komend od wykrycia do raportu
   - [ ] Testy CLI

3. [ ] Dodać testy wydajnościowe
   - [ ] Benchmark wykrywania komend
   - [ ] Benchmark wykonywania komend



(venv) tom@nvidia:~/github/coboarding/chat$ domd
TodoMD v0.1.1 - Project Command Detector with .doignore
🔍 Project: /home/tom/github/coboarding/chat
📝 TODO file: TODO.md
🔧 Script file: todo.sh
🚫 Ignore file: .doignore
2025-06-11 21:04:58 - domd.core.project_detection.detector - WARNING - No parsers found in registry, using legacy parsers
2025-06-11 21:04:58 - domd.core.project_detection.detector - INFO - Initialized 11 parsers
2025-06-11 21:04:58 - domd.core.project_detection.detector - INFO - Scanning project: /home/tom/github/coboarding/chat
2025-06-11 21:04:58 - domd.core.project_detection.detector - INFO - Found 49 configuration files
2025-06-11 21:04:58 - domd.core.parsers.pyproject_toml - ERROR - Error parsing /home/tom/github/coboarding/chat/pyproject.toml: Invalid group name 'coverage:run'. Try quoting it. (line 123 column 1 char 2874)
Traceback (most recent call last):
  File "/home/tom/github/coboarding/chat/venv/lib/python3.13/site-packages/domd/core/parsers/pyproject_toml.py", line 88, in parse
    data = toml_lib.loads(content)
  File "/home/tom/github/coboarding/chat/venv/lib/python3.13/site-packages/toml/decoder.py", line 455, in loads
    raise TomlDecodeError("Invalid group name '" +
                          groups[i] + "'. Try quoting it.",
                          original, pos)
toml.decoder.TomlDecodeError: Invalid group name 'coverage:run'. Try quoting it. (line 123 column 1 char 2874)
2025-06-11 21:04:58 - domd.core.project_detection.detector - INFO - Found 74 commands in total

🧪 Testing 74 commands...
📊 Progress will be updated in TODO.md
2025-06-11 21:04:58 - domd.core.services.command_service - INFO - Executing command: ansible all -i .pre-commit-config.yaml -m ping
2025-06-11 21:04:59 - domd.core.services.command_service - INFO - Executing command: docker build -t chat .

