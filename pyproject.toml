[tool.poetry]
name = "domd"
version = "2.1.20"
description = "Project Command Detector - Automatically detects and tests project commands, generates TODO.md for failed commands"
authors = ["Tom Sapletta <info@softreck.dev>"]
maintainers = ["WRONAI Team"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/wronai/domd"
documentation = "https://domd.readthedocs.io"
repository = "https://github.com/wronai/domd.git"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Systems Administration",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Natural Language :: English",
]

# Add project_urls for better PyPI display
[tool.poetry.urls]
"Bug Tracker" = "https://github.com/wronai/domd/issues"
"Changelog" = "https://github.com/wronai/domd/blob/main/CHANGELOG.md"
"Documentation" = "https://wronai.github.io/domd"

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
pyyaml = "^6.0"
toml = "^0.10.2"
configparser = "^5.3.0"
pathlib = { version = "*", python = ">=3.4" }

# Core dependencies
docker = "^6.1.3"

# Optional dependencies for advanced features
colorama = { version = "^0.4.6", optional = true }
rich = { version = "^13.0.0", optional = true }
click = { version = "^8.1.0", optional = true }
flask = { version = "^2.0.0", optional = true }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
domd = "domd.cli:main"
domd-api = "domd.api:main"
project-detector = "domd.cli:main"
cmd-detector = "domd.cli:main"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
pytest-docker = {version = "^2.0.0", extras = ["docker"]}
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pylint = "^2.17.0"
pre-commit = "^3.0.0"
coverage = {extras = ["toml"], version = "^7.0.0"}
codecov = "^2.1.0"
mkdocs = "^1.4.0"
mkdocs-material = "^9.0.0"
mkdocstrings = {extras = ["python"], version = "^0.22.0"}
pymdown-extensions = "^9.0"
bandit = "^1.7.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"
mkdocstrings = {extras = ["python"], version = "^0.22.0"}

[tool.poetry.group.testing.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
pytest-mock = "^3.10"
coverage = "^7.0"

[tool.poetry.group.lint.dependencies]
black = "^23.0"
isort = "^5.0"
flake8 = "^6.0"
mypy = "^1.0"
pylint = "^2.17"

[tool.poetry.group.all.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
pytest-mock = "^3.10"
coverage = "^7.0"
black = "^23.0"
isort = "^5.0"
flake8 = "^6.0"
mypy = "^1.0"
pylint = "^2.17"
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"
mkdocstrings = {extras = ["python"], version = "^0.22.0"}
colorama = "^0.4.6"
rich = "^13.0.0"
click = "^8.1.0"

# Optional extras
[tool.poetry.extras]
ui = ["colorama", "rich"]
cli = ["click"]
api = ["flask"]
all = ["colorama", "rich", "click", "flask"]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["domd"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yaml.*",
    "toml.*",
    "configparser.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "commands: marks tests for command detection",
    "parsers: marks tests for file parsers",
]

[tool.coverage.run]
source = ["src/domd"]
omit  = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".tox",
    ".venv",
    "*.egg-info"
]

[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "R0903",  # too-few-public-methods
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101"]

[tool.ruff.isort]
known-first-party = ["domd"]

# Documentation
[tool.mkdocs]
site_name = "DoMD Documentation"
site_description = "Project Command Detector - Automatically detects and tests project commands"
site_url = "https://wronai.github.io/domd"
repo_url = "https://github.com/wronai/domd"
repo_name = "wronai/domd"

# Packaging metadata
[tool.hatch.version]
path = "src/domd/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/domd"]
